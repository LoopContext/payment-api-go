package gen

import (
	"github.com/jinzhu/gorm"
	"github.com/rs/zerolog/log"
	"gopkg.in/gormigrate.v1"
)

// Migrate runs migrations
func Migrate(db *gorm.DB, options *gormigrate.Options, migrations []*gormigrate.Migration) error {
	m := gormigrate.New(db, options, migrations)

	// // it's possible to use this, but in case of any specific keys or columns are created in migrations, they will not be generated by automigrate
	// m.InitSchema(func(tx *gorm.DB) error {
	// 	return AutoMigrate(db)
	// })

	return m.Migrate()
}

func AutoMigrate(db *gorm.DB) (err error) {
	_db := db.AutoMigrate(
		Wallet{},
		WalletType{},
		AccountProviderType{},
		AccountProvider{},
		Account{},
		PaymentChannel{},
		PaymentType{},
		Payment{},
	)
	if _db.Error != nil {
		log.Err(_db.Error).Send()
		return _db.Error
	}
	if _db.Dialect().GetName() != "sqlite3" {

		err = _db.Model(Wallet{}).RemoveForeignKey("walletTypeId", TableName("wallet_types")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Wallet{}).AddForeignKey("walletTypeId", TableName("wallet_types")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(WalletType{}).RemoveForeignKey("walletId", TableName("wallets")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(WalletType{}).AddForeignKey("walletId", TableName("wallets")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(AccountProviderType{}).RemoveForeignKey("accountProviderId", TableName("account_providers")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(AccountProviderType{}).AddForeignKey("accountProviderId", TableName("account_providers")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(AccountProvider{}).RemoveForeignKey("accountProviderTypeId", TableName("account_provider_types")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(AccountProvider{}).AddForeignKey("accountProviderTypeId", TableName("account_provider_types")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Account{}).RemoveForeignKey("accountProviderId", TableName("account_providers")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Account{}).AddForeignKey("accountProviderId", TableName("account_providers")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Account{}).RemoveForeignKey("walletId", TableName("wallets")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Account{}).AddForeignKey("walletId", TableName("wallets")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(PaymentChannel{}).RemoveForeignKey("paymentId", TableName("payments")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(PaymentChannel{}).AddForeignKey("paymentId", TableName("payments")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(PaymentType{}).RemoveForeignKey("paymentId", TableName("payments")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(PaymentType{}).AddForeignKey("paymentId", TableName("payments")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Payment{}).RemoveForeignKey("walletId", TableName("wallets")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Payment{}).AddForeignKey("walletId", TableName("wallets")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Payment{}).RemoveForeignKey("accountId", TableName("accounts")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Payment{}).AddForeignKey("accountId", TableName("accounts")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Payment{}).RemoveForeignKey("paymentChannelId", TableName("payment_channels")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Payment{}).AddForeignKey("paymentChannelId", TableName("payment_channels")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		err = _db.Model(Payment{}).RemoveForeignKey("paymentTypeId", TableName("payment_types")+"(id)").Error
		if err != nil {
			log.Err(err).Send()
		}
		err = _db.Model(Payment{}).AddForeignKey("paymentTypeId", TableName("payment_types")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			log.Err(err).Send()
		}

		if _db.Error != nil {
			log.Err(_db.Error).Send()
		}
	}
	return nil // _db.Error
}
