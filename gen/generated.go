// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Account() AccountResolver
	AccountProvider() AccountProviderResolver
	AccountProviderResultType() AccountProviderResultTypeResolver
	AccountProviderType() AccountProviderTypeResolver
	AccountProviderTypeResultType() AccountProviderTypeResultTypeResolver
	AccountResultType() AccountResultTypeResolver
	Mutation() MutationResolver
	Payment() PaymentResolver
	PaymentChannel() PaymentChannelResolver
	PaymentChannelResultType() PaymentChannelResultTypeResolver
	PaymentResultType() PaymentResultTypeResolver
	PaymentType() PaymentTypeResolver
	PaymentTypeResultType() PaymentTypeResultTypeResolver
	Query() QueryResolver
	Wallet() WalletResolver
	WalletResultType() WalletResultTypeResolver
	WalletType() WalletTypeResolver
	WalletTypeResultType() WalletTypeResultTypeResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		AccountNumber      func(childComplexity int) int
		AccountProvider    func(childComplexity int) int
		AccountProviderID  func(childComplexity int) int
		Balance            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Payments           func(childComplexity int) int
		PaymentsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) int
		PaymentsIds        func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		Wallet             func(childComplexity int) int
		WalletID           func(childComplexity int) int
	}

	AccountProvider struct {
		AccountProviderType   func(childComplexity int) int
		AccountProviderTypeID func(childComplexity int) int
		Accounts              func(childComplexity int) int
		AccountsConnection    func(childComplexity int, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) int
		AccountsIds           func(childComplexity int) int
		Address               func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		Description           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		Phone                 func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
	}

	AccountProviderResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	AccountProviderType struct {
		AccountProvider   func(childComplexity int) int
		AccountProviderID func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	AccountProviderTypeResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	AccountResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Mutation struct {
		CreateAccount                 func(childComplexity int, input map[string]interface{}) int
		CreateAccountProvider         func(childComplexity int, input map[string]interface{}) int
		CreateAccountProviderType     func(childComplexity int, input map[string]interface{}) int
		CreatePayment                 func(childComplexity int, input map[string]interface{}) int
		CreatePaymentChannel          func(childComplexity int, input map[string]interface{}) int
		CreatePaymentType             func(childComplexity int, input map[string]interface{}) int
		CreateWallet                  func(childComplexity int, input map[string]interface{}) int
		CreateWalletType              func(childComplexity int, input map[string]interface{}) int
		DeleteAccount                 func(childComplexity int, id string) int
		DeleteAccountProvider         func(childComplexity int, id string) int
		DeleteAccountProviderType     func(childComplexity int, id string) int
		DeleteAllAccountProviderTypes func(childComplexity int) int
		DeleteAllAccountProviders     func(childComplexity int) int
		DeleteAllAccounts             func(childComplexity int) int
		DeleteAllPaymentChannels      func(childComplexity int) int
		DeleteAllPaymentTypes         func(childComplexity int) int
		DeleteAllPayments             func(childComplexity int) int
		DeleteAllWalletTypes          func(childComplexity int) int
		DeleteAllWallets              func(childComplexity int) int
		DeletePayment                 func(childComplexity int, id string) int
		DeletePaymentChannel          func(childComplexity int, id string) int
		DeletePaymentType             func(childComplexity int, id string) int
		DeleteWallet                  func(childComplexity int, id string) int
		DeleteWalletType              func(childComplexity int, id string) int
		UpdateAccount                 func(childComplexity int, id string, input map[string]interface{}) int
		UpdateAccountProvider         func(childComplexity int, id string, input map[string]interface{}) int
		UpdateAccountProviderType     func(childComplexity int, id string, input map[string]interface{}) int
		UpdatePayment                 func(childComplexity int, id string, input map[string]interface{}) int
		UpdatePaymentChannel          func(childComplexity int, id string, input map[string]interface{}) int
		UpdatePaymentType             func(childComplexity int, id string, input map[string]interface{}) int
		UpdateWallet                  func(childComplexity int, id string, input map[string]interface{}) int
		UpdateWalletType              func(childComplexity int, id string, input map[string]interface{}) int
	}

	Payment struct {
		Account          func(childComplexity int) int
		AccountID        func(childComplexity int) int
		Amount           func(childComplexity int) int
		Concept          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		ID               func(childComplexity int) int
		PaymentChannel   func(childComplexity int) int
		PaymentChannelID func(childComplexity int) int
		PaymentRef       func(childComplexity int) int
		PaymentType      func(childComplexity int) int
		PaymentTypeID    func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		Wallet           func(childComplexity int) int
		WalletID         func(childComplexity int) int
	}

	PaymentChannel struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Payment     func(childComplexity int) int
		PaymentID   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	PaymentChannelResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	PaymentResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	PaymentType struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Payment     func(childComplexity int) int
		PaymentID   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	PaymentTypeResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Query struct {
		Account              func(childComplexity int, id *string, q *string, filter *AccountFilterType) int
		AccountProvider      func(childComplexity int, id *string, q *string, filter *AccountProviderFilterType) int
		AccountProviderType  func(childComplexity int, id *string, q *string, filter *AccountProviderTypeFilterType) int
		AccountProviderTypes func(childComplexity int, offset *int, limit *int, q *string, sort []*AccountProviderTypeSortType, filter *AccountProviderTypeFilterType) int
		AccountProviders     func(childComplexity int, offset *int, limit *int, q *string, sort []*AccountProviderSortType, filter *AccountProviderFilterType) int
		Accounts             func(childComplexity int, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) int
		Payment              func(childComplexity int, id *string, q *string, filter *PaymentFilterType) int
		PaymentChannel       func(childComplexity int, id *string, q *string, filter *PaymentChannelFilterType) int
		PaymentChannels      func(childComplexity int, offset *int, limit *int, q *string, sort []*PaymentChannelSortType, filter *PaymentChannelFilterType) int
		PaymentType          func(childComplexity int, id *string, q *string, filter *PaymentTypeFilterType) int
		PaymentTypes         func(childComplexity int, offset *int, limit *int, q *string, sort []*PaymentTypeSortType, filter *PaymentTypeFilterType) int
		Payments             func(childComplexity int, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) int
		Wallet               func(childComplexity int, id *string, q *string, filter *WalletFilterType) int
		WalletType           func(childComplexity int, id *string, q *string, filter *WalletTypeFilterType) int
		WalletTypes          func(childComplexity int, offset *int, limit *int, q *string, sort []*WalletTypeSortType, filter *WalletTypeFilterType) int
		Wallets              func(childComplexity int, offset *int, limit *int, q *string, sort []*WalletSortType, filter *WalletFilterType) int
		__resolve__service   func(childComplexity int) int
	}

	Wallet struct {
		Accounts           func(childComplexity int) int
		AccountsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) int
		AccountsIds        func(childComplexity int) int
		Balance            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Payments           func(childComplexity int) int
		PaymentsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) int
		PaymentsIds        func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		UserID             func(childComplexity int) int
		WalletType         func(childComplexity int) int
		WalletTypeID       func(childComplexity int) int
	}

	WalletResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	WalletType struct {
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		Wallet      func(childComplexity int) int
		WalletID    func(childComplexity int) int
	}

	WalletTypeResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type AccountResolver interface {
	AccountProvider(ctx context.Context, obj *Account) (*AccountProvider, error)
	Wallet(ctx context.Context, obj *Account) (*Wallet, error)
	Payments(ctx context.Context, obj *Account) ([]*Payment, error)

	PaymentsIds(ctx context.Context, obj *Account) ([]string, error)
	PaymentsConnection(ctx context.Context, obj *Account, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) (*PaymentResultType, error)
}
type AccountProviderResolver interface {
	Accounts(ctx context.Context, obj *AccountProvider) ([]*Account, error)
	AccountProviderType(ctx context.Context, obj *AccountProvider) (*AccountProviderType, error)

	AccountsIds(ctx context.Context, obj *AccountProvider) ([]string, error)
	AccountsConnection(ctx context.Context, obj *AccountProvider, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) (*AccountResultType, error)
}
type AccountProviderResultTypeResolver interface {
	Items(ctx context.Context, obj *AccountProviderResultType) ([]*AccountProvider, error)
	Count(ctx context.Context, obj *AccountProviderResultType) (int, error)
}
type AccountProviderTypeResolver interface {
	AccountProvider(ctx context.Context, obj *AccountProviderType) (*AccountProvider, error)
}
type AccountProviderTypeResultTypeResolver interface {
	Items(ctx context.Context, obj *AccountProviderTypeResultType) ([]*AccountProviderType, error)
	Count(ctx context.Context, obj *AccountProviderTypeResultType) (int, error)
}
type AccountResultTypeResolver interface {
	Items(ctx context.Context, obj *AccountResultType) ([]*Account, error)
	Count(ctx context.Context, obj *AccountResultType) (int, error)
}
type MutationResolver interface {
	CreateWallet(ctx context.Context, input map[string]interface{}) (*Wallet, error)
	UpdateWallet(ctx context.Context, id string, input map[string]interface{}) (*Wallet, error)
	DeleteWallet(ctx context.Context, id string) (*Wallet, error)
	DeleteAllWallets(ctx context.Context) (bool, error)
	CreateWalletType(ctx context.Context, input map[string]interface{}) (*WalletType, error)
	UpdateWalletType(ctx context.Context, id string, input map[string]interface{}) (*WalletType, error)
	DeleteWalletType(ctx context.Context, id string) (*WalletType, error)
	DeleteAllWalletTypes(ctx context.Context) (bool, error)
	CreateAccountProviderType(ctx context.Context, input map[string]interface{}) (*AccountProviderType, error)
	UpdateAccountProviderType(ctx context.Context, id string, input map[string]interface{}) (*AccountProviderType, error)
	DeleteAccountProviderType(ctx context.Context, id string) (*AccountProviderType, error)
	DeleteAllAccountProviderTypes(ctx context.Context) (bool, error)
	CreateAccountProvider(ctx context.Context, input map[string]interface{}) (*AccountProvider, error)
	UpdateAccountProvider(ctx context.Context, id string, input map[string]interface{}) (*AccountProvider, error)
	DeleteAccountProvider(ctx context.Context, id string) (*AccountProvider, error)
	DeleteAllAccountProviders(ctx context.Context) (bool, error)
	CreateAccount(ctx context.Context, input map[string]interface{}) (*Account, error)
	UpdateAccount(ctx context.Context, id string, input map[string]interface{}) (*Account, error)
	DeleteAccount(ctx context.Context, id string) (*Account, error)
	DeleteAllAccounts(ctx context.Context) (bool, error)
	CreatePaymentChannel(ctx context.Context, input map[string]interface{}) (*PaymentChannel, error)
	UpdatePaymentChannel(ctx context.Context, id string, input map[string]interface{}) (*PaymentChannel, error)
	DeletePaymentChannel(ctx context.Context, id string) (*PaymentChannel, error)
	DeleteAllPaymentChannels(ctx context.Context) (bool, error)
	CreatePaymentType(ctx context.Context, input map[string]interface{}) (*PaymentType, error)
	UpdatePaymentType(ctx context.Context, id string, input map[string]interface{}) (*PaymentType, error)
	DeletePaymentType(ctx context.Context, id string) (*PaymentType, error)
	DeleteAllPaymentTypes(ctx context.Context) (bool, error)
	CreatePayment(ctx context.Context, input map[string]interface{}) (*Payment, error)
	UpdatePayment(ctx context.Context, id string, input map[string]interface{}) (*Payment, error)
	DeletePayment(ctx context.Context, id string) (*Payment, error)
	DeleteAllPayments(ctx context.Context) (bool, error)
}
type PaymentResolver interface {
	Wallet(ctx context.Context, obj *Payment) (*Wallet, error)
	Account(ctx context.Context, obj *Payment) (*Account, error)
	PaymentChannel(ctx context.Context, obj *Payment) (*PaymentChannel, error)
	PaymentType(ctx context.Context, obj *Payment) (*PaymentType, error)
}
type PaymentChannelResolver interface {
	Payment(ctx context.Context, obj *PaymentChannel) (*Payment, error)
}
type PaymentChannelResultTypeResolver interface {
	Items(ctx context.Context, obj *PaymentChannelResultType) ([]*PaymentChannel, error)
	Count(ctx context.Context, obj *PaymentChannelResultType) (int, error)
}
type PaymentResultTypeResolver interface {
	Items(ctx context.Context, obj *PaymentResultType) ([]*Payment, error)
	Count(ctx context.Context, obj *PaymentResultType) (int, error)
}
type PaymentTypeResolver interface {
	Payment(ctx context.Context, obj *PaymentType) (*Payment, error)
}
type PaymentTypeResultTypeResolver interface {
	Items(ctx context.Context, obj *PaymentTypeResultType) ([]*PaymentType, error)
	Count(ctx context.Context, obj *PaymentTypeResultType) (int, error)
}
type QueryResolver interface {
	Wallet(ctx context.Context, id *string, q *string, filter *WalletFilterType) (*Wallet, error)
	Wallets(ctx context.Context, offset *int, limit *int, q *string, sort []*WalletSortType, filter *WalletFilterType) (*WalletResultType, error)
	WalletType(ctx context.Context, id *string, q *string, filter *WalletTypeFilterType) (*WalletType, error)
	WalletTypes(ctx context.Context, offset *int, limit *int, q *string, sort []*WalletTypeSortType, filter *WalletTypeFilterType) (*WalletTypeResultType, error)
	AccountProviderType(ctx context.Context, id *string, q *string, filter *AccountProviderTypeFilterType) (*AccountProviderType, error)
	AccountProviderTypes(ctx context.Context, offset *int, limit *int, q *string, sort []*AccountProviderTypeSortType, filter *AccountProviderTypeFilterType) (*AccountProviderTypeResultType, error)
	AccountProvider(ctx context.Context, id *string, q *string, filter *AccountProviderFilterType) (*AccountProvider, error)
	AccountProviders(ctx context.Context, offset *int, limit *int, q *string, sort []*AccountProviderSortType, filter *AccountProviderFilterType) (*AccountProviderResultType, error)
	Account(ctx context.Context, id *string, q *string, filter *AccountFilterType) (*Account, error)
	Accounts(ctx context.Context, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) (*AccountResultType, error)
	PaymentChannel(ctx context.Context, id *string, q *string, filter *PaymentChannelFilterType) (*PaymentChannel, error)
	PaymentChannels(ctx context.Context, offset *int, limit *int, q *string, sort []*PaymentChannelSortType, filter *PaymentChannelFilterType) (*PaymentChannelResultType, error)
	PaymentType(ctx context.Context, id *string, q *string, filter *PaymentTypeFilterType) (*PaymentType, error)
	PaymentTypes(ctx context.Context, offset *int, limit *int, q *string, sort []*PaymentTypeSortType, filter *PaymentTypeFilterType) (*PaymentTypeResultType, error)
	Payment(ctx context.Context, id *string, q *string, filter *PaymentFilterType) (*Payment, error)
	Payments(ctx context.Context, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) (*PaymentResultType, error)
}
type WalletResolver interface {
	WalletType(ctx context.Context, obj *Wallet) (*WalletType, error)
	Accounts(ctx context.Context, obj *Wallet) ([]*Account, error)
	Payments(ctx context.Context, obj *Wallet) ([]*Payment, error)

	AccountsIds(ctx context.Context, obj *Wallet) ([]string, error)
	AccountsConnection(ctx context.Context, obj *Wallet, offset *int, limit *int, q *string, sort []*AccountSortType, filter *AccountFilterType) (*AccountResultType, error)
	PaymentsIds(ctx context.Context, obj *Wallet) ([]string, error)
	PaymentsConnection(ctx context.Context, obj *Wallet, offset *int, limit *int, q *string, sort []*PaymentSortType, filter *PaymentFilterType) (*PaymentResultType, error)
}
type WalletResultTypeResolver interface {
	Items(ctx context.Context, obj *WalletResultType) ([]*Wallet, error)
	Count(ctx context.Context, obj *WalletResultType) (int, error)
}
type WalletTypeResolver interface {
	Wallet(ctx context.Context, obj *WalletType) (*Wallet, error)
}
type WalletTypeResultTypeResolver interface {
	Items(ctx context.Context, obj *WalletTypeResultType) ([]*WalletType, error)
	Count(ctx context.Context, obj *WalletTypeResultType) (int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Account.accountNumber":
		if e.complexity.Account.AccountNumber == nil {
			break
		}

		return e.complexity.Account.AccountNumber(childComplexity), true

	case "Account.accountProvider":
		if e.complexity.Account.AccountProvider == nil {
			break
		}

		return e.complexity.Account.AccountProvider(childComplexity), true

	case "Account.accountProviderId":
		if e.complexity.Account.AccountProviderID == nil {
			break
		}

		return e.complexity.Account.AccountProviderID(childComplexity), true

	case "Account.balance":
		if e.complexity.Account.Balance == nil {
			break
		}

		return e.complexity.Account.Balance(childComplexity), true

	case "Account.createdAt":
		if e.complexity.Account.CreatedAt == nil {
			break
		}

		return e.complexity.Account.CreatedAt(childComplexity), true

	case "Account.createdBy":
		if e.complexity.Account.CreatedBy == nil {
			break
		}

		return e.complexity.Account.CreatedBy(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.payments":
		if e.complexity.Account.Payments == nil {
			break
		}

		return e.complexity.Account.Payments(childComplexity), true

	case "Account.paymentsConnection":
		if e.complexity.Account.PaymentsConnection == nil {
			break
		}

		args, err := ec.field_Account_paymentsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Account.PaymentsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType)), true

	case "Account.paymentsIds":
		if e.complexity.Account.PaymentsIds == nil {
			break
		}

		return e.complexity.Account.PaymentsIds(childComplexity), true

	case "Account.updatedAt":
		if e.complexity.Account.UpdatedAt == nil {
			break
		}

		return e.complexity.Account.UpdatedAt(childComplexity), true

	case "Account.updatedBy":
		if e.complexity.Account.UpdatedBy == nil {
			break
		}

		return e.complexity.Account.UpdatedBy(childComplexity), true

	case "Account.wallet":
		if e.complexity.Account.Wallet == nil {
			break
		}

		return e.complexity.Account.Wallet(childComplexity), true

	case "Account.walletId":
		if e.complexity.Account.WalletID == nil {
			break
		}

		return e.complexity.Account.WalletID(childComplexity), true

	case "AccountProvider.accountProviderType":
		if e.complexity.AccountProvider.AccountProviderType == nil {
			break
		}

		return e.complexity.AccountProvider.AccountProviderType(childComplexity), true

	case "AccountProvider.accountProviderTypeId":
		if e.complexity.AccountProvider.AccountProviderTypeID == nil {
			break
		}

		return e.complexity.AccountProvider.AccountProviderTypeID(childComplexity), true

	case "AccountProvider.accounts":
		if e.complexity.AccountProvider.Accounts == nil {
			break
		}

		return e.complexity.AccountProvider.Accounts(childComplexity), true

	case "AccountProvider.accountsConnection":
		if e.complexity.AccountProvider.AccountsConnection == nil {
			break
		}

		args, err := ec.field_AccountProvider_accountsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccountProvider.AccountsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType)), true

	case "AccountProvider.accountsIds":
		if e.complexity.AccountProvider.AccountsIds == nil {
			break
		}

		return e.complexity.AccountProvider.AccountsIds(childComplexity), true

	case "AccountProvider.address":
		if e.complexity.AccountProvider.Address == nil {
			break
		}

		return e.complexity.AccountProvider.Address(childComplexity), true

	case "AccountProvider.createdAt":
		if e.complexity.AccountProvider.CreatedAt == nil {
			break
		}

		return e.complexity.AccountProvider.CreatedAt(childComplexity), true

	case "AccountProvider.createdBy":
		if e.complexity.AccountProvider.CreatedBy == nil {
			break
		}

		return e.complexity.AccountProvider.CreatedBy(childComplexity), true

	case "AccountProvider.description":
		if e.complexity.AccountProvider.Description == nil {
			break
		}

		return e.complexity.AccountProvider.Description(childComplexity), true

	case "AccountProvider.id":
		if e.complexity.AccountProvider.ID == nil {
			break
		}

		return e.complexity.AccountProvider.ID(childComplexity), true

	case "AccountProvider.name":
		if e.complexity.AccountProvider.Name == nil {
			break
		}

		return e.complexity.AccountProvider.Name(childComplexity), true

	case "AccountProvider.phone":
		if e.complexity.AccountProvider.Phone == nil {
			break
		}

		return e.complexity.AccountProvider.Phone(childComplexity), true

	case "AccountProvider.updatedAt":
		if e.complexity.AccountProvider.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountProvider.UpdatedAt(childComplexity), true

	case "AccountProvider.updatedBy":
		if e.complexity.AccountProvider.UpdatedBy == nil {
			break
		}

		return e.complexity.AccountProvider.UpdatedBy(childComplexity), true

	case "AccountProviderResultType.count":
		if e.complexity.AccountProviderResultType.Count == nil {
			break
		}

		return e.complexity.AccountProviderResultType.Count(childComplexity), true

	case "AccountProviderResultType.items":
		if e.complexity.AccountProviderResultType.Items == nil {
			break
		}

		return e.complexity.AccountProviderResultType.Items(childComplexity), true

	case "AccountProviderType.accountProvider":
		if e.complexity.AccountProviderType.AccountProvider == nil {
			break
		}

		return e.complexity.AccountProviderType.AccountProvider(childComplexity), true

	case "AccountProviderType.accountProviderId":
		if e.complexity.AccountProviderType.AccountProviderID == nil {
			break
		}

		return e.complexity.AccountProviderType.AccountProviderID(childComplexity), true

	case "AccountProviderType.createdAt":
		if e.complexity.AccountProviderType.CreatedAt == nil {
			break
		}

		return e.complexity.AccountProviderType.CreatedAt(childComplexity), true

	case "AccountProviderType.createdBy":
		if e.complexity.AccountProviderType.CreatedBy == nil {
			break
		}

		return e.complexity.AccountProviderType.CreatedBy(childComplexity), true

	case "AccountProviderType.description":
		if e.complexity.AccountProviderType.Description == nil {
			break
		}

		return e.complexity.AccountProviderType.Description(childComplexity), true

	case "AccountProviderType.id":
		if e.complexity.AccountProviderType.ID == nil {
			break
		}

		return e.complexity.AccountProviderType.ID(childComplexity), true

	case "AccountProviderType.name":
		if e.complexity.AccountProviderType.Name == nil {
			break
		}

		return e.complexity.AccountProviderType.Name(childComplexity), true

	case "AccountProviderType.updatedAt":
		if e.complexity.AccountProviderType.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountProviderType.UpdatedAt(childComplexity), true

	case "AccountProviderType.updatedBy":
		if e.complexity.AccountProviderType.UpdatedBy == nil {
			break
		}

		return e.complexity.AccountProviderType.UpdatedBy(childComplexity), true

	case "AccountProviderTypeResultType.count":
		if e.complexity.AccountProviderTypeResultType.Count == nil {
			break
		}

		return e.complexity.AccountProviderTypeResultType.Count(childComplexity), true

	case "AccountProviderTypeResultType.items":
		if e.complexity.AccountProviderTypeResultType.Items == nil {
			break
		}

		return e.complexity.AccountProviderTypeResultType.Items(childComplexity), true

	case "AccountResultType.count":
		if e.complexity.AccountResultType.Count == nil {
			break
		}

		return e.complexity.AccountResultType.Count(childComplexity), true

	case "AccountResultType.items":
		if e.complexity.AccountResultType.Items == nil {
			break
		}

		return e.complexity.AccountResultType.Items(childComplexity), true

	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createAccountProvider":
		if e.complexity.Mutation.CreateAccountProvider == nil {
			break
		}

		args, err := ec.field_Mutation_createAccountProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccountProvider(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createAccountProviderType":
		if e.complexity.Mutation.CreateAccountProviderType == nil {
			break
		}

		args, err := ec.field_Mutation_createAccountProviderType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccountProviderType(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createPayment":
		if e.complexity.Mutation.CreatePayment == nil {
			break
		}

		args, err := ec.field_Mutation_createPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePayment(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createPaymentChannel":
		if e.complexity.Mutation.CreatePaymentChannel == nil {
			break
		}

		args, err := ec.field_Mutation_createPaymentChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePaymentChannel(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createPaymentType":
		if e.complexity.Mutation.CreatePaymentType == nil {
			break
		}

		args, err := ec.field_Mutation_createPaymentType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePaymentType(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createWallet":
		if e.complexity.Mutation.CreateWallet == nil {
			break
		}

		args, err := ec.field_Mutation_createWallet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWallet(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createWalletType":
		if e.complexity.Mutation.CreateWalletType == nil {
			break
		}

		args, err := ec.field_Mutation_createWalletType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWalletType(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.deleteAccount":
		if e.complexity.Mutation.DeleteAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccount(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAccountProvider":
		if e.complexity.Mutation.DeleteAccountProvider == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccountProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccountProvider(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAccountProviderType":
		if e.complexity.Mutation.DeleteAccountProviderType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccountProviderType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccountProviderType(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAllAccountProviderTypes":
		if e.complexity.Mutation.DeleteAllAccountProviderTypes == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllAccountProviderTypes(childComplexity), true

	case "Mutation.deleteAllAccountProviders":
		if e.complexity.Mutation.DeleteAllAccountProviders == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllAccountProviders(childComplexity), true

	case "Mutation.deleteAllAccounts":
		if e.complexity.Mutation.DeleteAllAccounts == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllAccounts(childComplexity), true

	case "Mutation.deleteAllPaymentChannels":
		if e.complexity.Mutation.DeleteAllPaymentChannels == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllPaymentChannels(childComplexity), true

	case "Mutation.deleteAllPaymentTypes":
		if e.complexity.Mutation.DeleteAllPaymentTypes == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllPaymentTypes(childComplexity), true

	case "Mutation.deleteAllPayments":
		if e.complexity.Mutation.DeleteAllPayments == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllPayments(childComplexity), true

	case "Mutation.deleteAllWalletTypes":
		if e.complexity.Mutation.DeleteAllWalletTypes == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllWalletTypes(childComplexity), true

	case "Mutation.deleteAllWallets":
		if e.complexity.Mutation.DeleteAllWallets == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllWallets(childComplexity), true

	case "Mutation.deletePayment":
		if e.complexity.Mutation.DeletePayment == nil {
			break
		}

		args, err := ec.field_Mutation_deletePayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePayment(childComplexity, args["id"].(string)), true

	case "Mutation.deletePaymentChannel":
		if e.complexity.Mutation.DeletePaymentChannel == nil {
			break
		}

		args, err := ec.field_Mutation_deletePaymentChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePaymentChannel(childComplexity, args["id"].(string)), true

	case "Mutation.deletePaymentType":
		if e.complexity.Mutation.DeletePaymentType == nil {
			break
		}

		args, err := ec.field_Mutation_deletePaymentType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePaymentType(childComplexity, args["id"].(string)), true

	case "Mutation.deleteWallet":
		if e.complexity.Mutation.DeleteWallet == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWallet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWallet(childComplexity, args["id"].(string)), true

	case "Mutation.deleteWalletType":
		if e.complexity.Mutation.DeleteWalletType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWalletType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWalletType(childComplexity, args["id"].(string)), true

	case "Mutation.updateAccount":
		if e.complexity.Mutation.UpdateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccount(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateAccountProvider":
		if e.complexity.Mutation.UpdateAccountProvider == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccountProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccountProvider(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateAccountProviderType":
		if e.complexity.Mutation.UpdateAccountProviderType == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccountProviderType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccountProviderType(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updatePayment":
		if e.complexity.Mutation.UpdatePayment == nil {
			break
		}

		args, err := ec.field_Mutation_updatePayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePayment(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updatePaymentChannel":
		if e.complexity.Mutation.UpdatePaymentChannel == nil {
			break
		}

		args, err := ec.field_Mutation_updatePaymentChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePaymentChannel(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updatePaymentType":
		if e.complexity.Mutation.UpdatePaymentType == nil {
			break
		}

		args, err := ec.field_Mutation_updatePaymentType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePaymentType(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateWallet":
		if e.complexity.Mutation.UpdateWallet == nil {
			break
		}

		args, err := ec.field_Mutation_updateWallet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWallet(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateWalletType":
		if e.complexity.Mutation.UpdateWalletType == nil {
			break
		}

		args, err := ec.field_Mutation_updateWalletType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWalletType(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Payment.account":
		if e.complexity.Payment.Account == nil {
			break
		}

		return e.complexity.Payment.Account(childComplexity), true

	case "Payment.accountId":
		if e.complexity.Payment.AccountID == nil {
			break
		}

		return e.complexity.Payment.AccountID(childComplexity), true

	case "Payment.amount":
		if e.complexity.Payment.Amount == nil {
			break
		}

		return e.complexity.Payment.Amount(childComplexity), true

	case "Payment.concept":
		if e.complexity.Payment.Concept == nil {
			break
		}

		return e.complexity.Payment.Concept(childComplexity), true

	case "Payment.createdAt":
		if e.complexity.Payment.CreatedAt == nil {
			break
		}

		return e.complexity.Payment.CreatedAt(childComplexity), true

	case "Payment.createdBy":
		if e.complexity.Payment.CreatedBy == nil {
			break
		}

		return e.complexity.Payment.CreatedBy(childComplexity), true

	case "Payment.id":
		if e.complexity.Payment.ID == nil {
			break
		}

		return e.complexity.Payment.ID(childComplexity), true

	case "Payment.paymentChannel":
		if e.complexity.Payment.PaymentChannel == nil {
			break
		}

		return e.complexity.Payment.PaymentChannel(childComplexity), true

	case "Payment.paymentChannelId":
		if e.complexity.Payment.PaymentChannelID == nil {
			break
		}

		return e.complexity.Payment.PaymentChannelID(childComplexity), true

	case "Payment.paymentRef":
		if e.complexity.Payment.PaymentRef == nil {
			break
		}

		return e.complexity.Payment.PaymentRef(childComplexity), true

	case "Payment.paymentType":
		if e.complexity.Payment.PaymentType == nil {
			break
		}

		return e.complexity.Payment.PaymentType(childComplexity), true

	case "Payment.paymentTypeId":
		if e.complexity.Payment.PaymentTypeID == nil {
			break
		}

		return e.complexity.Payment.PaymentTypeID(childComplexity), true

	case "Payment.updatedAt":
		if e.complexity.Payment.UpdatedAt == nil {
			break
		}

		return e.complexity.Payment.UpdatedAt(childComplexity), true

	case "Payment.updatedBy":
		if e.complexity.Payment.UpdatedBy == nil {
			break
		}

		return e.complexity.Payment.UpdatedBy(childComplexity), true

	case "Payment.wallet":
		if e.complexity.Payment.Wallet == nil {
			break
		}

		return e.complexity.Payment.Wallet(childComplexity), true

	case "Payment.walletId":
		if e.complexity.Payment.WalletID == nil {
			break
		}

		return e.complexity.Payment.WalletID(childComplexity), true

	case "PaymentChannel.createdAt":
		if e.complexity.PaymentChannel.CreatedAt == nil {
			break
		}

		return e.complexity.PaymentChannel.CreatedAt(childComplexity), true

	case "PaymentChannel.createdBy":
		if e.complexity.PaymentChannel.CreatedBy == nil {
			break
		}

		return e.complexity.PaymentChannel.CreatedBy(childComplexity), true

	case "PaymentChannel.description":
		if e.complexity.PaymentChannel.Description == nil {
			break
		}

		return e.complexity.PaymentChannel.Description(childComplexity), true

	case "PaymentChannel.id":
		if e.complexity.PaymentChannel.ID == nil {
			break
		}

		return e.complexity.PaymentChannel.ID(childComplexity), true

	case "PaymentChannel.name":
		if e.complexity.PaymentChannel.Name == nil {
			break
		}

		return e.complexity.PaymentChannel.Name(childComplexity), true

	case "PaymentChannel.payment":
		if e.complexity.PaymentChannel.Payment == nil {
			break
		}

		return e.complexity.PaymentChannel.Payment(childComplexity), true

	case "PaymentChannel.paymentId":
		if e.complexity.PaymentChannel.PaymentID == nil {
			break
		}

		return e.complexity.PaymentChannel.PaymentID(childComplexity), true

	case "PaymentChannel.updatedAt":
		if e.complexity.PaymentChannel.UpdatedAt == nil {
			break
		}

		return e.complexity.PaymentChannel.UpdatedAt(childComplexity), true

	case "PaymentChannel.updatedBy":
		if e.complexity.PaymentChannel.UpdatedBy == nil {
			break
		}

		return e.complexity.PaymentChannel.UpdatedBy(childComplexity), true

	case "PaymentChannelResultType.count":
		if e.complexity.PaymentChannelResultType.Count == nil {
			break
		}

		return e.complexity.PaymentChannelResultType.Count(childComplexity), true

	case "PaymentChannelResultType.items":
		if e.complexity.PaymentChannelResultType.Items == nil {
			break
		}

		return e.complexity.PaymentChannelResultType.Items(childComplexity), true

	case "PaymentResultType.count":
		if e.complexity.PaymentResultType.Count == nil {
			break
		}

		return e.complexity.PaymentResultType.Count(childComplexity), true

	case "PaymentResultType.items":
		if e.complexity.PaymentResultType.Items == nil {
			break
		}

		return e.complexity.PaymentResultType.Items(childComplexity), true

	case "PaymentType.createdAt":
		if e.complexity.PaymentType.CreatedAt == nil {
			break
		}

		return e.complexity.PaymentType.CreatedAt(childComplexity), true

	case "PaymentType.createdBy":
		if e.complexity.PaymentType.CreatedBy == nil {
			break
		}

		return e.complexity.PaymentType.CreatedBy(childComplexity), true

	case "PaymentType.description":
		if e.complexity.PaymentType.Description == nil {
			break
		}

		return e.complexity.PaymentType.Description(childComplexity), true

	case "PaymentType.id":
		if e.complexity.PaymentType.ID == nil {
			break
		}

		return e.complexity.PaymentType.ID(childComplexity), true

	case "PaymentType.name":
		if e.complexity.PaymentType.Name == nil {
			break
		}

		return e.complexity.PaymentType.Name(childComplexity), true

	case "PaymentType.payment":
		if e.complexity.PaymentType.Payment == nil {
			break
		}

		return e.complexity.PaymentType.Payment(childComplexity), true

	case "PaymentType.paymentId":
		if e.complexity.PaymentType.PaymentID == nil {
			break
		}

		return e.complexity.PaymentType.PaymentID(childComplexity), true

	case "PaymentType.updatedAt":
		if e.complexity.PaymentType.UpdatedAt == nil {
			break
		}

		return e.complexity.PaymentType.UpdatedAt(childComplexity), true

	case "PaymentType.updatedBy":
		if e.complexity.PaymentType.UpdatedBy == nil {
			break
		}

		return e.complexity.PaymentType.UpdatedBy(childComplexity), true

	case "PaymentTypeResultType.count":
		if e.complexity.PaymentTypeResultType.Count == nil {
			break
		}

		return e.complexity.PaymentTypeResultType.Count(childComplexity), true

	case "PaymentTypeResultType.items":
		if e.complexity.PaymentTypeResultType.Items == nil {
			break
		}

		return e.complexity.PaymentTypeResultType.Items(childComplexity), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		args, err := ec.field_Query_account_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Account(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountFilterType)), true

	case "Query.accountProvider":
		if e.complexity.Query.AccountProvider == nil {
			break
		}

		args, err := ec.field_Query_accountProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountProvider(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountProviderFilterType)), true

	case "Query.accountProviderType":
		if e.complexity.Query.AccountProviderType == nil {
			break
		}

		args, err := ec.field_Query_accountProviderType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountProviderType(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountProviderTypeFilterType)), true

	case "Query.accountProviderTypes":
		if e.complexity.Query.AccountProviderTypes == nil {
			break
		}

		args, err := ec.field_Query_accountProviderTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountProviderTypes(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountProviderTypeSortType), args["filter"].(*AccountProviderTypeFilterType)), true

	case "Query.accountProviders":
		if e.complexity.Query.AccountProviders == nil {
			break
		}

		args, err := ec.field_Query_accountProviders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountProviders(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountProviderSortType), args["filter"].(*AccountProviderFilterType)), true

	case "Query.accounts":
		if e.complexity.Query.Accounts == nil {
			break
		}

		args, err := ec.field_Query_accounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Accounts(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType)), true

	case "Query.payment":
		if e.complexity.Query.Payment == nil {
			break
		}

		args, err := ec.field_Query_payment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payment(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentFilterType)), true

	case "Query.paymentChannel":
		if e.complexity.Query.PaymentChannel == nil {
			break
		}

		args, err := ec.field_Query_paymentChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PaymentChannel(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentChannelFilterType)), true

	case "Query.paymentChannels":
		if e.complexity.Query.PaymentChannels == nil {
			break
		}

		args, err := ec.field_Query_paymentChannels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PaymentChannels(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentChannelSortType), args["filter"].(*PaymentChannelFilterType)), true

	case "Query.paymentType":
		if e.complexity.Query.PaymentType == nil {
			break
		}

		args, err := ec.field_Query_paymentType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PaymentType(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentTypeFilterType)), true

	case "Query.paymentTypes":
		if e.complexity.Query.PaymentTypes == nil {
			break
		}

		args, err := ec.field_Query_paymentTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PaymentTypes(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentTypeSortType), args["filter"].(*PaymentTypeFilterType)), true

	case "Query.payments":
		if e.complexity.Query.Payments == nil {
			break
		}

		args, err := ec.field_Query_payments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Payments(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType)), true

	case "Query.wallet":
		if e.complexity.Query.Wallet == nil {
			break
		}

		args, err := ec.field_Query_wallet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Wallet(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*WalletFilterType)), true

	case "Query.walletType":
		if e.complexity.Query.WalletType == nil {
			break
		}

		args, err := ec.field_Query_walletType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WalletType(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*WalletTypeFilterType)), true

	case "Query.walletTypes":
		if e.complexity.Query.WalletTypes == nil {
			break
		}

		args, err := ec.field_Query_walletTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WalletTypes(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*WalletTypeSortType), args["filter"].(*WalletTypeFilterType)), true

	case "Query.wallets":
		if e.complexity.Query.Wallets == nil {
			break
		}

		args, err := ec.field_Query_wallets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Wallets(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*WalletSortType), args["filter"].(*WalletFilterType)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Wallet.accounts":
		if e.complexity.Wallet.Accounts == nil {
			break
		}

		return e.complexity.Wallet.Accounts(childComplexity), true

	case "Wallet.accountsConnection":
		if e.complexity.Wallet.AccountsConnection == nil {
			break
		}

		args, err := ec.field_Wallet_accountsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Wallet.AccountsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType)), true

	case "Wallet.accountsIds":
		if e.complexity.Wallet.AccountsIds == nil {
			break
		}

		return e.complexity.Wallet.AccountsIds(childComplexity), true

	case "Wallet.balance":
		if e.complexity.Wallet.Balance == nil {
			break
		}

		return e.complexity.Wallet.Balance(childComplexity), true

	case "Wallet.createdAt":
		if e.complexity.Wallet.CreatedAt == nil {
			break
		}

		return e.complexity.Wallet.CreatedAt(childComplexity), true

	case "Wallet.createdBy":
		if e.complexity.Wallet.CreatedBy == nil {
			break
		}

		return e.complexity.Wallet.CreatedBy(childComplexity), true

	case "Wallet.id":
		if e.complexity.Wallet.ID == nil {
			break
		}

		return e.complexity.Wallet.ID(childComplexity), true

	case "Wallet.payments":
		if e.complexity.Wallet.Payments == nil {
			break
		}

		return e.complexity.Wallet.Payments(childComplexity), true

	case "Wallet.paymentsConnection":
		if e.complexity.Wallet.PaymentsConnection == nil {
			break
		}

		args, err := ec.field_Wallet_paymentsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Wallet.PaymentsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType)), true

	case "Wallet.paymentsIds":
		if e.complexity.Wallet.PaymentsIds == nil {
			break
		}

		return e.complexity.Wallet.PaymentsIds(childComplexity), true

	case "Wallet.updatedAt":
		if e.complexity.Wallet.UpdatedAt == nil {
			break
		}

		return e.complexity.Wallet.UpdatedAt(childComplexity), true

	case "Wallet.updatedBy":
		if e.complexity.Wallet.UpdatedBy == nil {
			break
		}

		return e.complexity.Wallet.UpdatedBy(childComplexity), true

	case "Wallet.userId":
		if e.complexity.Wallet.UserID == nil {
			break
		}

		return e.complexity.Wallet.UserID(childComplexity), true

	case "Wallet.walletType":
		if e.complexity.Wallet.WalletType == nil {
			break
		}

		return e.complexity.Wallet.WalletType(childComplexity), true

	case "Wallet.walletTypeId":
		if e.complexity.Wallet.WalletTypeID == nil {
			break
		}

		return e.complexity.Wallet.WalletTypeID(childComplexity), true

	case "WalletResultType.count":
		if e.complexity.WalletResultType.Count == nil {
			break
		}

		return e.complexity.WalletResultType.Count(childComplexity), true

	case "WalletResultType.items":
		if e.complexity.WalletResultType.Items == nil {
			break
		}

		return e.complexity.WalletResultType.Items(childComplexity), true

	case "WalletType.createdAt":
		if e.complexity.WalletType.CreatedAt == nil {
			break
		}

		return e.complexity.WalletType.CreatedAt(childComplexity), true

	case "WalletType.createdBy":
		if e.complexity.WalletType.CreatedBy == nil {
			break
		}

		return e.complexity.WalletType.CreatedBy(childComplexity), true

	case "WalletType.description":
		if e.complexity.WalletType.Description == nil {
			break
		}

		return e.complexity.WalletType.Description(childComplexity), true

	case "WalletType.id":
		if e.complexity.WalletType.ID == nil {
			break
		}

		return e.complexity.WalletType.ID(childComplexity), true

	case "WalletType.name":
		if e.complexity.WalletType.Name == nil {
			break
		}

		return e.complexity.WalletType.Name(childComplexity), true

	case "WalletType.updatedAt":
		if e.complexity.WalletType.UpdatedAt == nil {
			break
		}

		return e.complexity.WalletType.UpdatedAt(childComplexity), true

	case "WalletType.updatedBy":
		if e.complexity.WalletType.UpdatedBy == nil {
			break
		}

		return e.complexity.WalletType.UpdatedBy(childComplexity), true

	case "WalletType.wallet":
		if e.complexity.WalletType.Wallet == nil {
			break
		}

		return e.complexity.WalletType.Wallet(childComplexity), true

	case "WalletType.walletId":
		if e.complexity.WalletType.WalletID == nil {
			break
		}

		return e.complexity.WalletType.WalletID(childComplexity), true

	case "WalletTypeResultType.count":
		if e.complexity.WalletTypeResultType.Count == nil {
			break
		}

		return e.complexity.WalletTypeResultType.Count(childComplexity), true

	case "WalletTypeResultType.items":
		if e.complexity.WalletTypeResultType.Items == nil {
			break
		}

		return e.complexity.WalletTypeResultType.Items(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: `# This schema is generated, please don't update it manually

scalar Time

schema {
  query: Query
  mutation: Mutation
}

type Query {
  _service: _Service!
  wallet(id: ID, q: String, filter: WalletFilterType): Wallet
  wallets(offset: Int, limit: Int = 30, q: String, sort: [WalletSortType!], filter: WalletFilterType): WalletResultType!
  walletType(id: ID, q: String, filter: WalletTypeFilterType): WalletType
  walletTypes(offset: Int, limit: Int = 30, q: String, sort: [WalletTypeSortType!], filter: WalletTypeFilterType): WalletTypeResultType!
  accountProviderType(id: ID, q: String, filter: AccountProviderTypeFilterType): AccountProviderType
  accountProviderTypes(offset: Int, limit: Int = 30, q: String, sort: [AccountProviderTypeSortType!], filter: AccountProviderTypeFilterType): AccountProviderTypeResultType!
  accountProvider(id: ID, q: String, filter: AccountProviderFilterType): AccountProvider
  accountProviders(offset: Int, limit: Int = 30, q: String, sort: [AccountProviderSortType!], filter: AccountProviderFilterType): AccountProviderResultType!
  account(id: ID, q: String, filter: AccountFilterType): Account
  accounts(offset: Int, limit: Int = 30, q: String, sort: [AccountSortType!], filter: AccountFilterType): AccountResultType!
  paymentChannel(id: ID, q: String, filter: PaymentChannelFilterType): PaymentChannel
  paymentChannels(offset: Int, limit: Int = 30, q: String, sort: [PaymentChannelSortType!], filter: PaymentChannelFilterType): PaymentChannelResultType!
  paymentType(id: ID, q: String, filter: PaymentTypeFilterType): PaymentType
  paymentTypes(offset: Int, limit: Int = 30, q: String, sort: [PaymentTypeSortType!], filter: PaymentTypeFilterType): PaymentTypeResultType!
  payment(id: ID, q: String, filter: PaymentFilterType): Payment
  payments(offset: Int, limit: Int = 30, q: String, sort: [PaymentSortType!], filter: PaymentFilterType): PaymentResultType!
}

type Mutation {
  createWallet(input: WalletCreateInput!): Wallet!
  updateWallet(id: ID!, input: WalletUpdateInput!): Wallet!
  deleteWallet(id: ID!): Wallet!
  deleteAllWallets: Boolean!
  createWalletType(input: WalletTypeCreateInput!): WalletType!
  updateWalletType(id: ID!, input: WalletTypeUpdateInput!): WalletType!
  deleteWalletType(id: ID!): WalletType!
  deleteAllWalletTypes: Boolean!
  createAccountProviderType(input: AccountProviderTypeCreateInput!): AccountProviderType!
  updateAccountProviderType(id: ID!, input: AccountProviderTypeUpdateInput!): AccountProviderType!
  deleteAccountProviderType(id: ID!): AccountProviderType!
  deleteAllAccountProviderTypes: Boolean!
  createAccountProvider(input: AccountProviderCreateInput!): AccountProvider!
  updateAccountProvider(id: ID!, input: AccountProviderUpdateInput!): AccountProvider!
  deleteAccountProvider(id: ID!): AccountProvider!
  deleteAllAccountProviders: Boolean!
  createAccount(input: AccountCreateInput!): Account!
  updateAccount(id: ID!, input: AccountUpdateInput!): Account!
  deleteAccount(id: ID!): Account!
  deleteAllAccounts: Boolean!
  createPaymentChannel(input: PaymentChannelCreateInput!): PaymentChannel!
  updatePaymentChannel(id: ID!, input: PaymentChannelUpdateInput!): PaymentChannel!
  deletePaymentChannel(id: ID!): PaymentChannel!
  deleteAllPaymentChannels: Boolean!
  createPaymentType(input: PaymentTypeCreateInput!): PaymentType!
  updatePaymentType(id: ID!, input: PaymentTypeUpdateInput!): PaymentType!
  deletePaymentType(id: ID!): PaymentType!
  deleteAllPaymentTypes: Boolean!
  createPayment(input: PaymentCreateInput!): Payment!
  updatePayment(id: ID!, input: PaymentUpdateInput!): Payment!
  deletePayment(id: ID!): Payment!
  deleteAllPayments: Boolean!
}

enum ObjectSortType {
  ASC
  DESC
}

type Wallet {
  id: ID!
  userId: ID
  walletType: WalletType!
  accounts: [Account!]!
  payments: [Payment!]!
  balance: Float!
  walletTypeId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  accountsIds: [ID!]!
  accountsConnection(offset: Int, limit: Int = 30, q: String, sort: [AccountSortType!], filter: AccountFilterType): AccountResultType!
  paymentsIds: [ID!]!
  paymentsConnection(offset: Int, limit: Int = 30, q: String, sort: [PaymentSortType!], filter: PaymentFilterType): PaymentResultType!
}

type WalletType {
  id: ID!
  name: String!
  description: String
  wallet: Wallet
  walletId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type AccountProviderType {
  id: ID!
  name: String!
  description: String
  accountProvider: AccountProvider
  accountProviderId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type AccountProvider {
  id: ID!
  accounts: [Account!]!
  accountProviderType: AccountProviderType!
  name: String!
  description: String
  address: String
  phone: String
  accountProviderTypeId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  accountsIds: [ID!]!
  accountsConnection(offset: Int, limit: Int = 30, q: String, sort: [AccountSortType!], filter: AccountFilterType): AccountResultType!
}

type Account {
  id: ID!
  accountProvider: AccountProvider!
  wallet: Wallet!
  payments: [Payment!]!
  accountNumber: String!
  balance: Float!
  accountProviderId: ID
  walletId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  paymentsIds: [ID!]!
  paymentsConnection(offset: Int, limit: Int = 30, q: String, sort: [PaymentSortType!], filter: PaymentFilterType): PaymentResultType!
}

type PaymentChannel {
  id: ID!
  name: String!
  description: String
  payment: Payment
  paymentId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type PaymentType {
  id: ID!
  name: String!
  description: String
  payment: Payment
  paymentId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

type Payment {
  id: ID!
  wallet: Wallet
  account: Account!
  paymentChannel: PaymentChannel!
  paymentType: PaymentType!
  paymentRef: String
  amount: Float!
  concept: String
  walletId: ID
  accountId: ID
  paymentChannelId: ID
  paymentTypeId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
}

input WalletCreateInput {
  id: ID
  userId: ID
  balance: Float!
  walletTypeId: ID
  accountsIds: [ID!]
  paymentsIds: [ID!]
}

input WalletUpdateInput {
  userId: ID
  balance: Float
  walletTypeId: ID
  accountsIds: [ID!]
  paymentsIds: [ID!]
}

input WalletSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  userId: ObjectSortType
  userIdMin: ObjectSortType
  userIdMax: ObjectSortType
  balance: ObjectSortType
  balanceMin: ObjectSortType
  balanceMax: ObjectSortType
  balanceAvg: ObjectSortType
  walletTypeId: ObjectSortType
  walletTypeIdMin: ObjectSortType
  walletTypeIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  accountsIds: ObjectSortType
  accountsIdsMin: ObjectSortType
  accountsIdsMax: ObjectSortType
  paymentsIds: ObjectSortType
  paymentsIdsMin: ObjectSortType
  paymentsIdsMax: ObjectSortType
  walletType: WalletTypeSortType
  accounts: AccountSortType
  payments: PaymentSortType
}

input WalletFilterType {
  AND: [WalletFilterType!]
  OR: [WalletFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  userId: ID
  userIdMin: ID
  userIdMax: ID
  userId_ne: ID
  userIdMin_ne: ID
  userIdMax_ne: ID
  userId_gt: ID
  userIdMin_gt: ID
  userIdMax_gt: ID
  userId_lt: ID
  userIdMin_lt: ID
  userIdMax_lt: ID
  userId_gte: ID
  userIdMin_gte: ID
  userIdMax_gte: ID
  userId_lte: ID
  userIdMin_lte: ID
  userIdMax_lte: ID
  userId_in: [ID!]
  userIdMin_in: [ID!]
  userIdMax_in: [ID!]
  userId_not_in: [ID!]
  userIdMin_not_in: [ID!]
  userIdMax_not_in: [ID!]
  userId_null: Boolean
  balance: Float
  balanceMin: Float
  balanceMax: Float
  balanceAvg: Float
  balance_ne: Float
  balanceMin_ne: Float
  balanceMax_ne: Float
  balanceAvg_ne: Float
  balance_gt: Float
  balanceMin_gt: Float
  balanceMax_gt: Float
  balanceAvg_gt: Float
  balance_lt: Float
  balanceMin_lt: Float
  balanceMax_lt: Float
  balanceAvg_lt: Float
  balance_gte: Float
  balanceMin_gte: Float
  balanceMax_gte: Float
  balanceAvg_gte: Float
  balance_lte: Float
  balanceMin_lte: Float
  balanceMax_lte: Float
  balanceAvg_lte: Float
  balance_in: [Float!]
  balanceMin_in: [Float!]
  balanceMax_in: [Float!]
  balanceAvg_in: [Float!]
  balance_not_in: [Float!]
  balanceMin_not_in: [Float!]
  balanceMax_not_in: [Float!]
  balanceAvg_not_in: [Float!]
  balance_null: Boolean
  walletTypeId: ID
  walletTypeIdMin: ID
  walletTypeIdMax: ID
  walletTypeId_ne: ID
  walletTypeIdMin_ne: ID
  walletTypeIdMax_ne: ID
  walletTypeId_gt: ID
  walletTypeIdMin_gt: ID
  walletTypeIdMax_gt: ID
  walletTypeId_lt: ID
  walletTypeIdMin_lt: ID
  walletTypeIdMax_lt: ID
  walletTypeId_gte: ID
  walletTypeIdMin_gte: ID
  walletTypeIdMax_gte: ID
  walletTypeId_lte: ID
  walletTypeIdMin_lte: ID
  walletTypeIdMax_lte: ID
  walletTypeId_in: [ID!]
  walletTypeIdMin_in: [ID!]
  walletTypeIdMax_in: [ID!]
  walletTypeId_not_in: [ID!]
  walletTypeIdMin_not_in: [ID!]
  walletTypeIdMax_not_in: [ID!]
  walletTypeId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  walletType: WalletTypeFilterType
  accounts: AccountFilterType
  payments: PaymentFilterType
}

type WalletResultType {
  items: [Wallet!]!
  count: Int!
}

input WalletTypeCreateInput {
  id: ID
  name: String!
  description: String
  walletId: ID
}

input WalletTypeUpdateInput {
  name: String
  description: String
  walletId: ID
}

input WalletTypeSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  walletId: ObjectSortType
  walletIdMin: ObjectSortType
  walletIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  wallet: WalletSortType
}

input WalletTypeFilterType {
  AND: [WalletTypeFilterType!]
  OR: [WalletTypeFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  walletId: ID
  walletIdMin: ID
  walletIdMax: ID
  walletId_ne: ID
  walletIdMin_ne: ID
  walletIdMax_ne: ID
  walletId_gt: ID
  walletIdMin_gt: ID
  walletIdMax_gt: ID
  walletId_lt: ID
  walletIdMin_lt: ID
  walletIdMax_lt: ID
  walletId_gte: ID
  walletIdMin_gte: ID
  walletIdMax_gte: ID
  walletId_lte: ID
  walletIdMin_lte: ID
  walletIdMax_lte: ID
  walletId_in: [ID!]
  walletIdMin_in: [ID!]
  walletIdMax_in: [ID!]
  walletId_not_in: [ID!]
  walletIdMin_not_in: [ID!]
  walletIdMax_not_in: [ID!]
  walletId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  wallet: WalletFilterType
}

type WalletTypeResultType {
  items: [WalletType!]!
  count: Int!
}

input AccountProviderTypeCreateInput {
  id: ID
  name: String!
  description: String
  accountProviderId: ID
}

input AccountProviderTypeUpdateInput {
  name: String
  description: String
  accountProviderId: ID
}

input AccountProviderTypeSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  accountProviderId: ObjectSortType
  accountProviderIdMin: ObjectSortType
  accountProviderIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  accountProvider: AccountProviderSortType
}

input AccountProviderTypeFilterType {
  AND: [AccountProviderTypeFilterType!]
  OR: [AccountProviderTypeFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  accountProviderId: ID
  accountProviderIdMin: ID
  accountProviderIdMax: ID
  accountProviderId_ne: ID
  accountProviderIdMin_ne: ID
  accountProviderIdMax_ne: ID
  accountProviderId_gt: ID
  accountProviderIdMin_gt: ID
  accountProviderIdMax_gt: ID
  accountProviderId_lt: ID
  accountProviderIdMin_lt: ID
  accountProviderIdMax_lt: ID
  accountProviderId_gte: ID
  accountProviderIdMin_gte: ID
  accountProviderIdMax_gte: ID
  accountProviderId_lte: ID
  accountProviderIdMin_lte: ID
  accountProviderIdMax_lte: ID
  accountProviderId_in: [ID!]
  accountProviderIdMin_in: [ID!]
  accountProviderIdMax_in: [ID!]
  accountProviderId_not_in: [ID!]
  accountProviderIdMin_not_in: [ID!]
  accountProviderIdMax_not_in: [ID!]
  accountProviderId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  accountProvider: AccountProviderFilterType
}

type AccountProviderTypeResultType {
  items: [AccountProviderType!]!
  count: Int!
}

input AccountProviderCreateInput {
  id: ID
  name: String!
  description: String
  address: String
  phone: String
  accountProviderTypeId: ID
  accountsIds: [ID!]
}

input AccountProviderUpdateInput {
  name: String
  description: String
  address: String
  phone: String
  accountProviderTypeId: ID
  accountsIds: [ID!]
}

input AccountProviderSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  address: ObjectSortType
  addressMin: ObjectSortType
  addressMax: ObjectSortType
  phone: ObjectSortType
  phoneMin: ObjectSortType
  phoneMax: ObjectSortType
  accountProviderTypeId: ObjectSortType
  accountProviderTypeIdMin: ObjectSortType
  accountProviderTypeIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  accountsIds: ObjectSortType
  accountsIdsMin: ObjectSortType
  accountsIdsMax: ObjectSortType
  accounts: AccountSortType
  accountProviderType: AccountProviderTypeSortType
}

input AccountProviderFilterType {
  AND: [AccountProviderFilterType!]
  OR: [AccountProviderFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  address: String
  addressMin: String
  addressMax: String
  address_ne: String
  addressMin_ne: String
  addressMax_ne: String
  address_gt: String
  addressMin_gt: String
  addressMax_gt: String
  address_lt: String
  addressMin_lt: String
  addressMax_lt: String
  address_gte: String
  addressMin_gte: String
  addressMax_gte: String
  address_lte: String
  addressMin_lte: String
  addressMax_lte: String
  address_in: [String!]
  addressMin_in: [String!]
  addressMax_in: [String!]
  address_not_in: [String!]
  addressMin_not_in: [String!]
  addressMax_not_in: [String!]
  address_like: String
  addressMin_like: String
  addressMax_like: String
  address_prefix: String
  addressMin_prefix: String
  addressMax_prefix: String
  address_suffix: String
  addressMin_suffix: String
  addressMax_suffix: String
  address_null: Boolean
  phone: String
  phoneMin: String
  phoneMax: String
  phone_ne: String
  phoneMin_ne: String
  phoneMax_ne: String
  phone_gt: String
  phoneMin_gt: String
  phoneMax_gt: String
  phone_lt: String
  phoneMin_lt: String
  phoneMax_lt: String
  phone_gte: String
  phoneMin_gte: String
  phoneMax_gte: String
  phone_lte: String
  phoneMin_lte: String
  phoneMax_lte: String
  phone_in: [String!]
  phoneMin_in: [String!]
  phoneMax_in: [String!]
  phone_not_in: [String!]
  phoneMin_not_in: [String!]
  phoneMax_not_in: [String!]
  phone_like: String
  phoneMin_like: String
  phoneMax_like: String
  phone_prefix: String
  phoneMin_prefix: String
  phoneMax_prefix: String
  phone_suffix: String
  phoneMin_suffix: String
  phoneMax_suffix: String
  phone_null: Boolean
  accountProviderTypeId: ID
  accountProviderTypeIdMin: ID
  accountProviderTypeIdMax: ID
  accountProviderTypeId_ne: ID
  accountProviderTypeIdMin_ne: ID
  accountProviderTypeIdMax_ne: ID
  accountProviderTypeId_gt: ID
  accountProviderTypeIdMin_gt: ID
  accountProviderTypeIdMax_gt: ID
  accountProviderTypeId_lt: ID
  accountProviderTypeIdMin_lt: ID
  accountProviderTypeIdMax_lt: ID
  accountProviderTypeId_gte: ID
  accountProviderTypeIdMin_gte: ID
  accountProviderTypeIdMax_gte: ID
  accountProviderTypeId_lte: ID
  accountProviderTypeIdMin_lte: ID
  accountProviderTypeIdMax_lte: ID
  accountProviderTypeId_in: [ID!]
  accountProviderTypeIdMin_in: [ID!]
  accountProviderTypeIdMax_in: [ID!]
  accountProviderTypeId_not_in: [ID!]
  accountProviderTypeIdMin_not_in: [ID!]
  accountProviderTypeIdMax_not_in: [ID!]
  accountProviderTypeId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  accounts: AccountFilterType
  accountProviderType: AccountProviderTypeFilterType
}

type AccountProviderResultType {
  items: [AccountProvider!]!
  count: Int!
}

input AccountCreateInput {
  id: ID
  accountNumber: String!
  balance: Float!
  accountProviderId: ID
  walletId: ID
  paymentsIds: [ID!]
}

input AccountUpdateInput {
  accountNumber: String
  balance: Float
  accountProviderId: ID
  walletId: ID
  paymentsIds: [ID!]
}

input AccountSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  accountNumber: ObjectSortType
  accountNumberMin: ObjectSortType
  accountNumberMax: ObjectSortType
  balance: ObjectSortType
  balanceMin: ObjectSortType
  balanceMax: ObjectSortType
  balanceAvg: ObjectSortType
  accountProviderId: ObjectSortType
  accountProviderIdMin: ObjectSortType
  accountProviderIdMax: ObjectSortType
  walletId: ObjectSortType
  walletIdMin: ObjectSortType
  walletIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  paymentsIds: ObjectSortType
  paymentsIdsMin: ObjectSortType
  paymentsIdsMax: ObjectSortType
  accountProvider: AccountProviderSortType
  wallet: WalletSortType
  payments: PaymentSortType
}

input AccountFilterType {
  AND: [AccountFilterType!]
  OR: [AccountFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  accountNumber: String
  accountNumberMin: String
  accountNumberMax: String
  accountNumber_ne: String
  accountNumberMin_ne: String
  accountNumberMax_ne: String
  accountNumber_gt: String
  accountNumberMin_gt: String
  accountNumberMax_gt: String
  accountNumber_lt: String
  accountNumberMin_lt: String
  accountNumberMax_lt: String
  accountNumber_gte: String
  accountNumberMin_gte: String
  accountNumberMax_gte: String
  accountNumber_lte: String
  accountNumberMin_lte: String
  accountNumberMax_lte: String
  accountNumber_in: [String!]
  accountNumberMin_in: [String!]
  accountNumberMax_in: [String!]
  accountNumber_not_in: [String!]
  accountNumberMin_not_in: [String!]
  accountNumberMax_not_in: [String!]
  accountNumber_like: String
  accountNumberMin_like: String
  accountNumberMax_like: String
  accountNumber_prefix: String
  accountNumberMin_prefix: String
  accountNumberMax_prefix: String
  accountNumber_suffix: String
  accountNumberMin_suffix: String
  accountNumberMax_suffix: String
  accountNumber_null: Boolean
  balance: Float
  balanceMin: Float
  balanceMax: Float
  balanceAvg: Float
  balance_ne: Float
  balanceMin_ne: Float
  balanceMax_ne: Float
  balanceAvg_ne: Float
  balance_gt: Float
  balanceMin_gt: Float
  balanceMax_gt: Float
  balanceAvg_gt: Float
  balance_lt: Float
  balanceMin_lt: Float
  balanceMax_lt: Float
  balanceAvg_lt: Float
  balance_gte: Float
  balanceMin_gte: Float
  balanceMax_gte: Float
  balanceAvg_gte: Float
  balance_lte: Float
  balanceMin_lte: Float
  balanceMax_lte: Float
  balanceAvg_lte: Float
  balance_in: [Float!]
  balanceMin_in: [Float!]
  balanceMax_in: [Float!]
  balanceAvg_in: [Float!]
  balance_not_in: [Float!]
  balanceMin_not_in: [Float!]
  balanceMax_not_in: [Float!]
  balanceAvg_not_in: [Float!]
  balance_null: Boolean
  accountProviderId: ID
  accountProviderIdMin: ID
  accountProviderIdMax: ID
  accountProviderId_ne: ID
  accountProviderIdMin_ne: ID
  accountProviderIdMax_ne: ID
  accountProviderId_gt: ID
  accountProviderIdMin_gt: ID
  accountProviderIdMax_gt: ID
  accountProviderId_lt: ID
  accountProviderIdMin_lt: ID
  accountProviderIdMax_lt: ID
  accountProviderId_gte: ID
  accountProviderIdMin_gte: ID
  accountProviderIdMax_gte: ID
  accountProviderId_lte: ID
  accountProviderIdMin_lte: ID
  accountProviderIdMax_lte: ID
  accountProviderId_in: [ID!]
  accountProviderIdMin_in: [ID!]
  accountProviderIdMax_in: [ID!]
  accountProviderId_not_in: [ID!]
  accountProviderIdMin_not_in: [ID!]
  accountProviderIdMax_not_in: [ID!]
  accountProviderId_null: Boolean
  walletId: ID
  walletIdMin: ID
  walletIdMax: ID
  walletId_ne: ID
  walletIdMin_ne: ID
  walletIdMax_ne: ID
  walletId_gt: ID
  walletIdMin_gt: ID
  walletIdMax_gt: ID
  walletId_lt: ID
  walletIdMin_lt: ID
  walletIdMax_lt: ID
  walletId_gte: ID
  walletIdMin_gte: ID
  walletIdMax_gte: ID
  walletId_lte: ID
  walletIdMin_lte: ID
  walletIdMax_lte: ID
  walletId_in: [ID!]
  walletIdMin_in: [ID!]
  walletIdMax_in: [ID!]
  walletId_not_in: [ID!]
  walletIdMin_not_in: [ID!]
  walletIdMax_not_in: [ID!]
  walletId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  accountProvider: AccountProviderFilterType
  wallet: WalletFilterType
  payments: PaymentFilterType
}

type AccountResultType {
  items: [Account!]!
  count: Int!
}

input PaymentChannelCreateInput {
  id: ID
  name: String!
  description: String
  paymentId: ID
}

input PaymentChannelUpdateInput {
  name: String
  description: String
  paymentId: ID
}

input PaymentChannelSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  paymentId: ObjectSortType
  paymentIdMin: ObjectSortType
  paymentIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  payment: PaymentSortType
}

input PaymentChannelFilterType {
  AND: [PaymentChannelFilterType!]
  OR: [PaymentChannelFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  paymentId: ID
  paymentIdMin: ID
  paymentIdMax: ID
  paymentId_ne: ID
  paymentIdMin_ne: ID
  paymentIdMax_ne: ID
  paymentId_gt: ID
  paymentIdMin_gt: ID
  paymentIdMax_gt: ID
  paymentId_lt: ID
  paymentIdMin_lt: ID
  paymentIdMax_lt: ID
  paymentId_gte: ID
  paymentIdMin_gte: ID
  paymentIdMax_gte: ID
  paymentId_lte: ID
  paymentIdMin_lte: ID
  paymentIdMax_lte: ID
  paymentId_in: [ID!]
  paymentIdMin_in: [ID!]
  paymentIdMax_in: [ID!]
  paymentId_not_in: [ID!]
  paymentIdMin_not_in: [ID!]
  paymentIdMax_not_in: [ID!]
  paymentId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  payment: PaymentFilterType
}

type PaymentChannelResultType {
  items: [PaymentChannel!]!
  count: Int!
}

input PaymentTypeCreateInput {
  id: ID
  name: String!
  description: String
  paymentId: ID
}

input PaymentTypeUpdateInput {
  name: String
  description: String
  paymentId: ID
}

input PaymentTypeSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  paymentId: ObjectSortType
  paymentIdMin: ObjectSortType
  paymentIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  payment: PaymentSortType
}

input PaymentTypeFilterType {
  AND: [PaymentTypeFilterType!]
  OR: [PaymentTypeFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  paymentId: ID
  paymentIdMin: ID
  paymentIdMax: ID
  paymentId_ne: ID
  paymentIdMin_ne: ID
  paymentIdMax_ne: ID
  paymentId_gt: ID
  paymentIdMin_gt: ID
  paymentIdMax_gt: ID
  paymentId_lt: ID
  paymentIdMin_lt: ID
  paymentIdMax_lt: ID
  paymentId_gte: ID
  paymentIdMin_gte: ID
  paymentIdMax_gte: ID
  paymentId_lte: ID
  paymentIdMin_lte: ID
  paymentIdMax_lte: ID
  paymentId_in: [ID!]
  paymentIdMin_in: [ID!]
  paymentIdMax_in: [ID!]
  paymentId_not_in: [ID!]
  paymentIdMin_not_in: [ID!]
  paymentIdMax_not_in: [ID!]
  paymentId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  payment: PaymentFilterType
}

type PaymentTypeResultType {
  items: [PaymentType!]!
  count: Int!
}

input PaymentCreateInput {
  id: ID
  paymentRef: String
  amount: Float!
  concept: String
  walletId: ID
  accountId: ID
  paymentChannelId: ID
  paymentTypeId: ID
}

input PaymentUpdateInput {
  paymentRef: String
  amount: Float
  concept: String
  walletId: ID
  accountId: ID
  paymentChannelId: ID
  paymentTypeId: ID
}

input PaymentSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  paymentRef: ObjectSortType
  paymentRefMin: ObjectSortType
  paymentRefMax: ObjectSortType
  amount: ObjectSortType
  amountMin: ObjectSortType
  amountMax: ObjectSortType
  amountAvg: ObjectSortType
  concept: ObjectSortType
  conceptMin: ObjectSortType
  conceptMax: ObjectSortType
  walletId: ObjectSortType
  walletIdMin: ObjectSortType
  walletIdMax: ObjectSortType
  accountId: ObjectSortType
  accountIdMin: ObjectSortType
  accountIdMax: ObjectSortType
  paymentChannelId: ObjectSortType
  paymentChannelIdMin: ObjectSortType
  paymentChannelIdMax: ObjectSortType
  paymentTypeId: ObjectSortType
  paymentTypeIdMin: ObjectSortType
  paymentTypeIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  wallet: WalletSortType
  account: AccountSortType
  paymentChannel: PaymentChannelSortType
  paymentType: PaymentTypeSortType
}

input PaymentFilterType {
  AND: [PaymentFilterType!]
  OR: [PaymentFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  paymentRef: String
  paymentRefMin: String
  paymentRefMax: String
  paymentRef_ne: String
  paymentRefMin_ne: String
  paymentRefMax_ne: String
  paymentRef_gt: String
  paymentRefMin_gt: String
  paymentRefMax_gt: String
  paymentRef_lt: String
  paymentRefMin_lt: String
  paymentRefMax_lt: String
  paymentRef_gte: String
  paymentRefMin_gte: String
  paymentRefMax_gte: String
  paymentRef_lte: String
  paymentRefMin_lte: String
  paymentRefMax_lte: String
  paymentRef_in: [String!]
  paymentRefMin_in: [String!]
  paymentRefMax_in: [String!]
  paymentRef_not_in: [String!]
  paymentRefMin_not_in: [String!]
  paymentRefMax_not_in: [String!]
  paymentRef_like: String
  paymentRefMin_like: String
  paymentRefMax_like: String
  paymentRef_prefix: String
  paymentRefMin_prefix: String
  paymentRefMax_prefix: String
  paymentRef_suffix: String
  paymentRefMin_suffix: String
  paymentRefMax_suffix: String
  paymentRef_null: Boolean
  amount: Float
  amountMin: Float
  amountMax: Float
  amountAvg: Float
  amount_ne: Float
  amountMin_ne: Float
  amountMax_ne: Float
  amountAvg_ne: Float
  amount_gt: Float
  amountMin_gt: Float
  amountMax_gt: Float
  amountAvg_gt: Float
  amount_lt: Float
  amountMin_lt: Float
  amountMax_lt: Float
  amountAvg_lt: Float
  amount_gte: Float
  amountMin_gte: Float
  amountMax_gte: Float
  amountAvg_gte: Float
  amount_lte: Float
  amountMin_lte: Float
  amountMax_lte: Float
  amountAvg_lte: Float
  amount_in: [Float!]
  amountMin_in: [Float!]
  amountMax_in: [Float!]
  amountAvg_in: [Float!]
  amount_not_in: [Float!]
  amountMin_not_in: [Float!]
  amountMax_not_in: [Float!]
  amountAvg_not_in: [Float!]
  amount_null: Boolean
  concept: String
  conceptMin: String
  conceptMax: String
  concept_ne: String
  conceptMin_ne: String
  conceptMax_ne: String
  concept_gt: String
  conceptMin_gt: String
  conceptMax_gt: String
  concept_lt: String
  conceptMin_lt: String
  conceptMax_lt: String
  concept_gte: String
  conceptMin_gte: String
  conceptMax_gte: String
  concept_lte: String
  conceptMin_lte: String
  conceptMax_lte: String
  concept_in: [String!]
  conceptMin_in: [String!]
  conceptMax_in: [String!]
  concept_not_in: [String!]
  conceptMin_not_in: [String!]
  conceptMax_not_in: [String!]
  concept_like: String
  conceptMin_like: String
  conceptMax_like: String
  concept_prefix: String
  conceptMin_prefix: String
  conceptMax_prefix: String
  concept_suffix: String
  conceptMin_suffix: String
  conceptMax_suffix: String
  concept_null: Boolean
  walletId: ID
  walletIdMin: ID
  walletIdMax: ID
  walletId_ne: ID
  walletIdMin_ne: ID
  walletIdMax_ne: ID
  walletId_gt: ID
  walletIdMin_gt: ID
  walletIdMax_gt: ID
  walletId_lt: ID
  walletIdMin_lt: ID
  walletIdMax_lt: ID
  walletId_gte: ID
  walletIdMin_gte: ID
  walletIdMax_gte: ID
  walletId_lte: ID
  walletIdMin_lte: ID
  walletIdMax_lte: ID
  walletId_in: [ID!]
  walletIdMin_in: [ID!]
  walletIdMax_in: [ID!]
  walletId_not_in: [ID!]
  walletIdMin_not_in: [ID!]
  walletIdMax_not_in: [ID!]
  walletId_null: Boolean
  accountId: ID
  accountIdMin: ID
  accountIdMax: ID
  accountId_ne: ID
  accountIdMin_ne: ID
  accountIdMax_ne: ID
  accountId_gt: ID
  accountIdMin_gt: ID
  accountIdMax_gt: ID
  accountId_lt: ID
  accountIdMin_lt: ID
  accountIdMax_lt: ID
  accountId_gte: ID
  accountIdMin_gte: ID
  accountIdMax_gte: ID
  accountId_lte: ID
  accountIdMin_lte: ID
  accountIdMax_lte: ID
  accountId_in: [ID!]
  accountIdMin_in: [ID!]
  accountIdMax_in: [ID!]
  accountId_not_in: [ID!]
  accountIdMin_not_in: [ID!]
  accountIdMax_not_in: [ID!]
  accountId_null: Boolean
  paymentChannelId: ID
  paymentChannelIdMin: ID
  paymentChannelIdMax: ID
  paymentChannelId_ne: ID
  paymentChannelIdMin_ne: ID
  paymentChannelIdMax_ne: ID
  paymentChannelId_gt: ID
  paymentChannelIdMin_gt: ID
  paymentChannelIdMax_gt: ID
  paymentChannelId_lt: ID
  paymentChannelIdMin_lt: ID
  paymentChannelIdMax_lt: ID
  paymentChannelId_gte: ID
  paymentChannelIdMin_gte: ID
  paymentChannelIdMax_gte: ID
  paymentChannelId_lte: ID
  paymentChannelIdMin_lte: ID
  paymentChannelIdMax_lte: ID
  paymentChannelId_in: [ID!]
  paymentChannelIdMin_in: [ID!]
  paymentChannelIdMax_in: [ID!]
  paymentChannelId_not_in: [ID!]
  paymentChannelIdMin_not_in: [ID!]
  paymentChannelIdMax_not_in: [ID!]
  paymentChannelId_null: Boolean
  paymentTypeId: ID
  paymentTypeIdMin: ID
  paymentTypeIdMax: ID
  paymentTypeId_ne: ID
  paymentTypeIdMin_ne: ID
  paymentTypeIdMax_ne: ID
  paymentTypeId_gt: ID
  paymentTypeIdMin_gt: ID
  paymentTypeIdMax_gt: ID
  paymentTypeId_lt: ID
  paymentTypeIdMin_lt: ID
  paymentTypeIdMax_lt: ID
  paymentTypeId_gte: ID
  paymentTypeIdMin_gte: ID
  paymentTypeIdMax_gte: ID
  paymentTypeId_lte: ID
  paymentTypeIdMin_lte: ID
  paymentTypeIdMax_lte: ID
  paymentTypeId_in: [ID!]
  paymentTypeIdMin_in: [ID!]
  paymentTypeIdMax_in: [ID!]
  paymentTypeId_not_in: [ID!]
  paymentTypeIdMin_not_in: [ID!]
  paymentTypeIdMax_not_in: [ID!]
  paymentTypeId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  wallet: WalletFilterType
  account: AccountFilterType
  paymentChannel: PaymentChannelFilterType
  paymentType: PaymentTypeFilterType
}

type PaymentResultType {
  items: [Payment!]!
  count: Int!
}

type _Service {
  sdl: String
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_AccountProvider_accountsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*AccountSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOAccountSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *AccountFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Account_paymentsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PaymentSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPaymentSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PaymentFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccountProviderType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAccountProviderTypeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccountProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAccountProviderCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAccountCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPaymentChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentChannelCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPaymentType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentTypeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPaymentCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWalletType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNWalletTypeCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWallet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNWalletCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccountProviderType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccountProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePaymentChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePaymentType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWalletType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWallet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAccountProviderType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAccountProviderTypeUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAccountProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAccountProviderUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAccountUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePaymentChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPaymentChannelUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePaymentType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPaymentTypeUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPaymentUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWalletType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNWalletTypeUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWallet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNWalletUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accountProviderType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *AccountProviderTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_accountProviderTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*AccountProviderTypeSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOAccountProviderTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *AccountProviderTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_accountProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *AccountProviderFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_accountProviders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*AccountProviderSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOAccountProviderSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *AccountProviderFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_account_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *AccountFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_accounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*AccountSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOAccountSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *AccountFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_paymentChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *PaymentChannelFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_paymentChannels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PaymentChannelSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPaymentChannelSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PaymentChannelFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_paymentType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *PaymentTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_paymentTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PaymentTypeSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPaymentTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PaymentTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_payment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *PaymentFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_payments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PaymentSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPaymentSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PaymentFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_walletType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *WalletTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_walletTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*WalletTypeSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOWalletTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *WalletTypeFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_wallet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *WalletFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_wallets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*WalletSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOWalletSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *WalletFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Wallet_accountsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*AccountSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOAccountSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *AccountFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Wallet_paymentsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PaymentSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPaymentSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PaymentFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_accountProvider(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().AccountProvider(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_wallet(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Wallet(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_payments(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Payments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_accountNumber(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_balance(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_accountProviderId(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountProviderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_walletId(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_createdAt(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_createdBy(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_paymentsIds(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().PaymentsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_paymentsConnection(ctx context.Context, field graphql.CollectedField, obj *Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Account_paymentsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().PaymentsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentResultType)
	fc.Result = res
	return ec.marshalNPaymentResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_id(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_accounts(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProvider().Accounts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_accountProviderType(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProvider().AccountProviderType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderType)
	fc.Result = res
	return ec.marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_name(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_description(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_address(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_phone(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_accountProviderTypeId(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountProviderTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_updatedAt(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_createdAt(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_updatedBy(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_createdBy(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_accountsIds(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProvider().AccountsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProvider_accountsConnection(ctx context.Context, field graphql.CollectedField, obj *AccountProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AccountProvider_accountsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProvider().AccountsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountResultType)
	fc.Result = res
	return ec.marshalNAccountResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderResultType_items(ctx context.Context, field graphql.CollectedField, obj *AccountProviderResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProviderResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*AccountProvider)
	fc.Result = res
	return ec.marshalNAccountProvider2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderResultType_count(ctx context.Context, field graphql.CollectedField, obj *AccountProviderResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProviderResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_id(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_name(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_description(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_accountProvider(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProviderType().AccountProvider(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalOAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_accountProviderId(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountProviderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_createdAt(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderType_createdBy(ctx context.Context, field graphql.CollectedField, obj *AccountProviderType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderTypeResultType_items(ctx context.Context, field graphql.CollectedField, obj *AccountProviderTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProviderTypeResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*AccountProviderType)
	fc.Result = res
	return ec.marshalNAccountProviderType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountProviderTypeResultType_count(ctx context.Context, field graphql.CollectedField, obj *AccountProviderTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountProviderTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountProviderTypeResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountResultType_items(ctx context.Context, field graphql.CollectedField, obj *AccountResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountResultType_count(ctx context.Context, field graphql.CollectedField, obj *AccountResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccountResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccountResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createWallet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createWallet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWallet(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateWallet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateWallet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWallet(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteWallet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteWallet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWallet(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllWallets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllWallets(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createWalletType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createWalletType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWalletType(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletType)
	fc.Result = res
	return ec.marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateWalletType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateWalletType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWalletType(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletType)
	fc.Result = res
	return ec.marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteWalletType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteWalletType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWalletType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletType)
	fc.Result = res
	return ec.marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllWalletTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllWalletTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAccountProviderType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAccountProviderType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccountProviderType(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderType)
	fc.Result = res
	return ec.marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAccountProviderType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAccountProviderType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAccountProviderType(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderType)
	fc.Result = res
	return ec.marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccountProviderType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccountProviderType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccountProviderType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderType)
	fc.Result = res
	return ec.marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllAccountProviderTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllAccountProviderTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAccountProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAccountProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccountProvider(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAccountProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAccountProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAccountProvider(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccountProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccountProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccountProvider(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllAccountProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllAccountProviders(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccount(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAccount(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccount(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllAccounts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPaymentChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPaymentChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePaymentChannel(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentChannel)
	fc.Result = res
	return ec.marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePaymentChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePaymentChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePaymentChannel(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentChannel)
	fc.Result = res
	return ec.marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePaymentChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePaymentChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePaymentChannel(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentChannel)
	fc.Result = res
	return ec.marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPaymentChannels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPaymentChannels(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPaymentType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPaymentType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePaymentType(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePaymentType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePaymentType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePaymentType(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePaymentType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePaymentType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePaymentType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPaymentTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPaymentTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePayment(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePayment(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePayment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPayments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_id(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_wallet(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Payment().Wallet(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalOWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_account(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Payment().Account(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentChannel(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Payment().PaymentChannel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentChannel)
	fc.Result = res
	return ec.marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentType(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Payment().PaymentType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentRef(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_amount(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_concept(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Concept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_walletId(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_accountId(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentChannelId(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_paymentTypeId(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_createdAt(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_createdBy(ctx context.Context, field graphql.CollectedField, obj *Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_id(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_name(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_description(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_payment(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentChannel().Payment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_paymentId(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_updatedAt(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_createdAt(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_updatedBy(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannel_createdBy(ctx context.Context, field graphql.CollectedField, obj *PaymentChannel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannelResultType_items(ctx context.Context, field graphql.CollectedField, obj *PaymentChannelResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannelResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentChannelResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*PaymentChannel)
	fc.Result = res
	return ec.marshalNPaymentChannel2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentChannelResultType_count(ctx context.Context, field graphql.CollectedField, obj *PaymentChannelResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentChannelResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentChannelResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentResultType_items(ctx context.Context, field graphql.CollectedField, obj *PaymentResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentResultType_count(ctx context.Context, field graphql.CollectedField, obj *PaymentResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_id(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_name(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_description(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_payment(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentType().Payment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_paymentId(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_createdAt(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentType_createdBy(ctx context.Context, field graphql.CollectedField, obj *PaymentType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentTypeResultType_items(ctx context.Context, field graphql.CollectedField, obj *PaymentTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentTypeResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentTypeResultType_count(ctx context.Context, field graphql.CollectedField, obj *PaymentTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentTypeResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_wallet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_wallet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Wallet(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*WalletFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalOWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_wallets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_wallets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Wallets(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*WalletSortType), args["filter"].(*WalletFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletResultType)
	fc.Result = res
	return ec.marshalNWalletResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_walletType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_walletType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WalletType(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*WalletTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*WalletType)
	fc.Result = res
	return ec.marshalOWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_walletTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_walletTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WalletTypes(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*WalletTypeSortType), args["filter"].(*WalletTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletTypeResultType)
	fc.Result = res
	return ec.marshalNWalletTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accountProviderType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accountProviderType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountProviderType(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountProviderTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AccountProviderType)
	fc.Result = res
	return ec.marshalOAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accountProviderTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accountProviderTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountProviderTypes(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountProviderTypeSortType), args["filter"].(*AccountProviderTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderTypeResultType)
	fc.Result = res
	return ec.marshalNAccountProviderTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accountProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accountProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountProvider(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountProviderFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AccountProvider)
	fc.Result = res
	return ec.marshalOAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accountProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accountProviders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountProviders(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountProviderSortType), args["filter"].(*AccountProviderFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountProviderResultType)
	fc.Result = res
	return ec.marshalNAccountProviderResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_account_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Account(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*AccountFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Account)
	fc.Result = res
	return ec.marshalOAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_accounts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Accounts(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountResultType)
	fc.Result = res
	return ec.marshalNAccountResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_paymentChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_paymentChannel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PaymentChannel(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentChannelFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PaymentChannel)
	fc.Result = res
	return ec.marshalOPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_paymentChannels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_paymentChannels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PaymentChannels(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentChannelSortType), args["filter"].(*PaymentChannelFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentChannelResultType)
	fc.Result = res
	return ec.marshalNPaymentChannelResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_paymentType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_paymentType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PaymentType(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PaymentType)
	fc.Result = res
	return ec.marshalOPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_paymentTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_paymentTypes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PaymentTypes(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentTypeSortType), args["filter"].(*PaymentTypeFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentTypeResultType)
	fc.Result = res
	return ec.marshalNPaymentTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payment(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*PaymentFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Payment)
	fc.Result = res
	return ec.marshalOPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Payments(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentResultType)
	fc.Result = res
	return ec.marshalNPaymentResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_id(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_userId(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_walletType(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().WalletType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WalletType)
	fc.Result = res
	return ec.marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_accounts(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().Accounts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Account)
	fc.Result = res
	return ec.marshalNAccount2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_payments(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().Payments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_balance(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_walletTypeId(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_createdAt(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_createdBy(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_accountsIds(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().AccountsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_accountsConnection(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Wallet_accountsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().AccountsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*AccountSortType), args["filter"].(*AccountFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AccountResultType)
	fc.Result = res
	return ec.marshalNAccountResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_paymentsIds(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().PaymentsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Wallet_paymentsConnection(ctx context.Context, field graphql.CollectedField, obj *Wallet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Wallet_paymentsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Wallet().PaymentsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PaymentSortType), args["filter"].(*PaymentFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PaymentResultType)
	fc.Result = res
	return ec.marshalNPaymentResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletResultType_items(ctx context.Context, field graphql.CollectedField, obj *WalletResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.WalletResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletResultType_count(ctx context.Context, field graphql.CollectedField, obj *WalletResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.WalletResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_id(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_name(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_description(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_wallet(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.WalletType().Wallet(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Wallet)
	fc.Result = res
	return ec.marshalOWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_walletId(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_createdAt(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletType_createdBy(ctx context.Context, field graphql.CollectedField, obj *WalletType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletTypeResultType_items(ctx context.Context, field graphql.CollectedField, obj *WalletTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.WalletTypeResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*WalletType)
	fc.Result = res
	return ec.marshalNWalletType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletTypeResultType_count(ctx context.Context, field graphql.CollectedField, obj *WalletTypeResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletTypeResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.WalletTypeResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountFilterType(ctx context.Context, obj interface{}) (AccountFilterType, error) {
	var it AccountFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOAccountFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOAccountFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber"))
			it.AccountNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin"))
			it.AccountNumberMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax"))
			it.AccountNumberMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_ne"))
			it.AccountNumberNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_ne"))
			it.AccountNumberMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_ne"))
			it.AccountNumberMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_gt"))
			it.AccountNumberGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_gt"))
			it.AccountNumberMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_gt"))
			it.AccountNumberMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_lt"))
			it.AccountNumberLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_lt"))
			it.AccountNumberMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_lt"))
			it.AccountNumberMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_gte"))
			it.AccountNumberGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_gte"))
			it.AccountNumberMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_gte"))
			it.AccountNumberMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_lte"))
			it.AccountNumberLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_lte"))
			it.AccountNumberMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_lte"))
			it.AccountNumberMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_in"))
			it.AccountNumberIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_in"))
			it.AccountNumberMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_in"))
			it.AccountNumberMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_not_in"))
			it.AccountNumberNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_not_in"))
			it.AccountNumberMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_not_in"))
			it.AccountNumberMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_like"))
			it.AccountNumberLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_like"))
			it.AccountNumberMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_like"))
			it.AccountNumberMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_prefix"))
			it.AccountNumberPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_prefix"))
			it.AccountNumberMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_prefix"))
			it.AccountNumberMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_suffix"))
			it.AccountNumberSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin_suffix"))
			it.AccountNumberMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax_suffix"))
			it.AccountNumberMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber_null"))
			it.AccountNumberNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			it.Balance, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin"))
			it.BalanceMin, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax"))
			it.BalanceMax, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg"))
			it.BalanceAvg, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_ne"))
			it.BalanceNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_ne"))
			it.BalanceMinNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_ne"))
			it.BalanceMaxNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_ne"))
			it.BalanceAvgNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_gt"))
			it.BalanceGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_gt"))
			it.BalanceMinGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_gt"))
			it.BalanceMaxGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_gt"))
			it.BalanceAvgGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_lt"))
			it.BalanceLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_lt"))
			it.BalanceMinLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_lt"))
			it.BalanceMaxLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_lt"))
			it.BalanceAvgLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_gte"))
			it.BalanceGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_gte"))
			it.BalanceMinGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_gte"))
			it.BalanceMaxGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_gte"))
			it.BalanceAvgGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_lte"))
			it.BalanceLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_lte"))
			it.BalanceMinLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_lte"))
			it.BalanceMaxLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_lte"))
			it.BalanceAvgLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_in"))
			it.BalanceIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_in"))
			it.BalanceMinIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_in"))
			it.BalanceMaxIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_in"))
			it.BalanceAvgIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_not_in"))
			it.BalanceNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_not_in"))
			it.BalanceMinNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_not_in"))
			it.BalanceMaxNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_not_in"))
			it.BalanceAvgNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_null"))
			it.BalanceNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId"))
			it.AccountProviderID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin"))
			it.AccountProviderIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax"))
			it.AccountProviderIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_ne"))
			it.AccountProviderIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_ne"))
			it.AccountProviderIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_ne"))
			it.AccountProviderIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_gt"))
			it.AccountProviderIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_gt"))
			it.AccountProviderIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_gt"))
			it.AccountProviderIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_lt"))
			it.AccountProviderIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_lt"))
			it.AccountProviderIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_lt"))
			it.AccountProviderIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_gte"))
			it.AccountProviderIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_gte"))
			it.AccountProviderIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_gte"))
			it.AccountProviderIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_lte"))
			it.AccountProviderIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_lte"))
			it.AccountProviderIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_lte"))
			it.AccountProviderIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_in"))
			it.AccountProviderIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_in"))
			it.AccountProviderIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_in"))
			it.AccountProviderIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_not_in"))
			it.AccountProviderIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_not_in"))
			it.AccountProviderIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_not_in"))
			it.AccountProviderIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_null"))
			it.AccountProviderIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_ne"))
			it.WalletIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_ne"))
			it.WalletIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_ne"))
			it.WalletIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gt"))
			it.WalletIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gt"))
			it.WalletIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gt"))
			it.WalletIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lt"))
			it.WalletIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lt"))
			it.WalletIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lt"))
			it.WalletIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gte"))
			it.WalletIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gte"))
			it.WalletIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gte"))
			it.WalletIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lte"))
			it.WalletIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lte"))
			it.WalletIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lte"))
			it.WalletIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_in"))
			it.WalletIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_in"))
			it.WalletIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_in"))
			it.WalletIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_not_in"))
			it.WalletIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_not_in"))
			it.WalletIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_not_in"))
			it.WalletIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_null"))
			it.WalletIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProvider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProvider"))
			it.AccountProvider, err = ec.unmarshalOAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payments"))
			it.Payments, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountProviderFilterType(ctx context.Context, obj interface{}) (AccountProviderFilterType, error) {
	var it AccountProviderFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOAccountProviderFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOAccountProviderFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin"))
			it.AddressMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax"))
			it.AddressMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_ne"))
			it.AddressNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_ne"))
			it.AddressMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_ne"))
			it.AddressMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_gt"))
			it.AddressGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_gt"))
			it.AddressMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_gt"))
			it.AddressMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_lt"))
			it.AddressLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_lt"))
			it.AddressMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_lt"))
			it.AddressMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_gte"))
			it.AddressGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_gte"))
			it.AddressMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_gte"))
			it.AddressMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_lte"))
			it.AddressLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_lte"))
			it.AddressMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_lte"))
			it.AddressMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_in"))
			it.AddressIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_in"))
			it.AddressMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_in"))
			it.AddressMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_in"))
			it.AddressNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_not_in"))
			it.AddressMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_not_in"))
			it.AddressMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_like"))
			it.AddressLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_like"))
			it.AddressMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_like"))
			it.AddressMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_prefix"))
			it.AddressPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_prefix"))
			it.AddressMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_prefix"))
			it.AddressMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_suffix"))
			it.AddressSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin_suffix"))
			it.AddressMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax_suffix"))
			it.AddressMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_null"))
			it.AddressNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin"))
			it.PhoneMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax"))
			it.PhoneMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_ne"))
			it.PhoneNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_ne"))
			it.PhoneMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_ne"))
			it.PhoneMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_gt"))
			it.PhoneGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_gt"))
			it.PhoneMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_gt"))
			it.PhoneMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_lt"))
			it.PhoneLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_lt"))
			it.PhoneMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_lt"))
			it.PhoneMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_gte"))
			it.PhoneGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_gte"))
			it.PhoneMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_gte"))
			it.PhoneMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_lte"))
			it.PhoneLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_lte"))
			it.PhoneMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_lte"))
			it.PhoneMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_in"))
			it.PhoneIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_in"))
			it.PhoneMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_in"))
			it.PhoneMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_not_in"))
			it.PhoneNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_not_in"))
			it.PhoneMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_not_in"))
			it.PhoneMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_like"))
			it.PhoneLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_like"))
			it.PhoneMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_like"))
			it.PhoneMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_prefix"))
			it.PhonePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_prefix"))
			it.PhoneMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_prefix"))
			it.PhoneMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_suffix"))
			it.PhoneSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin_suffix"))
			it.PhoneMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax_suffix"))
			it.PhoneMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_null"))
			it.PhoneNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId"))
			it.AccountProviderTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin"))
			it.AccountProviderTypeIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax"))
			it.AccountProviderTypeIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_ne"))
			it.AccountProviderTypeIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_ne"))
			it.AccountProviderTypeIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_ne"))
			it.AccountProviderTypeIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_gt"))
			it.AccountProviderTypeIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_gt"))
			it.AccountProviderTypeIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_gt"))
			it.AccountProviderTypeIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_lt"))
			it.AccountProviderTypeIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_lt"))
			it.AccountProviderTypeIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_lt"))
			it.AccountProviderTypeIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_gte"))
			it.AccountProviderTypeIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_gte"))
			it.AccountProviderTypeIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_gte"))
			it.AccountProviderTypeIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_lte"))
			it.AccountProviderTypeIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_lte"))
			it.AccountProviderTypeIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_lte"))
			it.AccountProviderTypeIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_in"))
			it.AccountProviderTypeIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_in"))
			it.AccountProviderTypeIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_in"))
			it.AccountProviderTypeIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_not_in"))
			it.AccountProviderTypeIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin_not_in"))
			it.AccountProviderTypeIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax_not_in"))
			it.AccountProviderTypeIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId_null"))
			it.AccountProviderTypeIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounts"))
			it.Accounts, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderType"))
			it.AccountProviderType, err = ec.unmarshalOAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountProviderSortType(ctx context.Context, obj interface{}) (AccountProviderSortType, error) {
	var it AccountProviderSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMin"))
			it.AddressMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressMax"))
			it.AddressMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMin"))
			it.PhoneMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneMax"))
			it.PhoneMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeId"))
			it.AccountProviderTypeID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMin"))
			it.AccountProviderTypeIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderTypeIdMax"))
			it.AccountProviderTypeIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIds"))
			it.AccountsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIdsMin"))
			it.AccountsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIdsMax"))
			it.AccountsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounts"))
			it.Accounts, err = ec.unmarshalOAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderType"))
			it.AccountProviderType, err = ec.unmarshalOAccountProviderTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountProviderTypeFilterType(ctx context.Context, obj interface{}) (AccountProviderTypeFilterType, error) {
	var it AccountProviderTypeFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOAccountProviderTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOAccountProviderTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId"))
			it.AccountProviderID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin"))
			it.AccountProviderIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax"))
			it.AccountProviderIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_ne"))
			it.AccountProviderIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_ne"))
			it.AccountProviderIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_ne"))
			it.AccountProviderIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_gt"))
			it.AccountProviderIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_gt"))
			it.AccountProviderIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_gt"))
			it.AccountProviderIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_lt"))
			it.AccountProviderIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_lt"))
			it.AccountProviderIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_lt"))
			it.AccountProviderIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_gte"))
			it.AccountProviderIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_gte"))
			it.AccountProviderIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_gte"))
			it.AccountProviderIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_lte"))
			it.AccountProviderIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_lte"))
			it.AccountProviderIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_lte"))
			it.AccountProviderIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_in"))
			it.AccountProviderIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_in"))
			it.AccountProviderIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_in"))
			it.AccountProviderIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_not_in"))
			it.AccountProviderIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin_not_in"))
			it.AccountProviderIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax_not_in"))
			it.AccountProviderIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId_null"))
			it.AccountProviderIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProvider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProvider"))
			it.AccountProvider, err = ec.unmarshalOAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountProviderTypeSortType(ctx context.Context, obj interface{}) (AccountProviderTypeSortType, error) {
	var it AccountProviderTypeSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId"))
			it.AccountProviderID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin"))
			it.AccountProviderIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax"))
			it.AccountProviderIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProvider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProvider"))
			it.AccountProvider, err = ec.unmarshalOAccountProviderSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountSortType(ctx context.Context, obj interface{}) (AccountSortType, error) {
	var it AccountSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber"))
			it.AccountNumber, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMin"))
			it.AccountNumberMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountNumberMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumberMax"))
			it.AccountNumberMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			it.Balance, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin"))
			it.BalanceMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax"))
			it.BalanceMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg"))
			it.BalanceAvg, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderId"))
			it.AccountProviderID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMin"))
			it.AccountProviderIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProviderIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProviderIdMax"))
			it.AccountProviderIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIds"))
			it.PaymentsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIdsMin"))
			it.PaymentsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIdsMax"))
			it.PaymentsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountProvider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountProvider"))
			it.AccountProvider, err = ec.unmarshalOAccountProviderSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payments"))
			it.Payments, err = ec.unmarshalOPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentChannelFilterType(ctx context.Context, obj interface{}) (PaymentChannelFilterType, error) {
	var it PaymentChannelFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPaymentChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPaymentChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_ne"))
			it.PaymentIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_ne"))
			it.PaymentIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_ne"))
			it.PaymentIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gt"))
			it.PaymentIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gt"))
			it.PaymentIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gt"))
			it.PaymentIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lt"))
			it.PaymentIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lt"))
			it.PaymentIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lt"))
			it.PaymentIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gte"))
			it.PaymentIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gte"))
			it.PaymentIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gte"))
			it.PaymentIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lte"))
			it.PaymentIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lte"))
			it.PaymentIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lte"))
			it.PaymentIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_in"))
			it.PaymentIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_in"))
			it.PaymentIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_in"))
			it.PaymentIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_not_in"))
			it.PaymentIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_not_in"))
			it.PaymentIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_not_in"))
			it.PaymentIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_null"))
			it.PaymentIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
			it.Payment, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentChannelSortType(ctx context.Context, obj interface{}) (PaymentChannelSortType, error) {
	var it PaymentChannelSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
			it.Payment, err = ec.unmarshalOPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentFilterType(ctx context.Context, obj interface{}) (PaymentFilterType, error) {
	var it PaymentFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPaymentFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPaymentFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef"))
			it.PaymentRef, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin"))
			it.PaymentRefMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax"))
			it.PaymentRefMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_ne"))
			it.PaymentRefNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_ne"))
			it.PaymentRefMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_ne"))
			it.PaymentRefMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_gt"))
			it.PaymentRefGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_gt"))
			it.PaymentRefMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_gt"))
			it.PaymentRefMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_lt"))
			it.PaymentRefLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_lt"))
			it.PaymentRefMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_lt"))
			it.PaymentRefMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_gte"))
			it.PaymentRefGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_gte"))
			it.PaymentRefMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_gte"))
			it.PaymentRefMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_lte"))
			it.PaymentRefLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_lte"))
			it.PaymentRefMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_lte"))
			it.PaymentRefMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_in"))
			it.PaymentRefIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_in"))
			it.PaymentRefMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_in"))
			it.PaymentRefMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_not_in"))
			it.PaymentRefNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_not_in"))
			it.PaymentRefMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_not_in"))
			it.PaymentRefMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_like"))
			it.PaymentRefLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_like"))
			it.PaymentRefMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_like"))
			it.PaymentRefMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_prefix"))
			it.PaymentRefPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_prefix"))
			it.PaymentRefMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_prefix"))
			it.PaymentRefMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_suffix"))
			it.PaymentRefSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin_suffix"))
			it.PaymentRefMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax_suffix"))
			it.PaymentRefMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef_null"))
			it.PaymentRefNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin"))
			it.AmountMin, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax"))
			it.AmountMax, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg"))
			it.AmountAvg, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_ne"))
			it.AmountNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_ne"))
			it.AmountMinNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_ne"))
			it.AmountMaxNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_ne"))
			it.AmountAvgNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gt"))
			it.AmountGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_gt"))
			it.AmountMinGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_gt"))
			it.AmountMaxGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_gt"))
			it.AmountAvgGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lt"))
			it.AmountLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_lt"))
			it.AmountMinLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_lt"))
			it.AmountMaxLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_lt"))
			it.AmountAvgLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_gte"))
			it.AmountGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_gte"))
			it.AmountMinGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_gte"))
			it.AmountMaxGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_gte"))
			it.AmountAvgGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_lte"))
			it.AmountLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_lte"))
			it.AmountMinLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_lte"))
			it.AmountMaxLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_lte"))
			it.AmountAvgLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_in"))
			it.AmountIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_in"))
			it.AmountMinIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_in"))
			it.AmountMaxIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_in"))
			it.AmountAvgIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_not_in"))
			it.AmountNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin_not_in"))
			it.AmountMinNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax_not_in"))
			it.AmountMaxNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg_not_in"))
			it.AmountAvgNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount_null"))
			it.AmountNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept"))
			it.Concept, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin"))
			it.ConceptMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax"))
			it.ConceptMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_ne"))
			it.ConceptNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_ne"))
			it.ConceptMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_ne"))
			it.ConceptMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_gt"))
			it.ConceptGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_gt"))
			it.ConceptMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_gt"))
			it.ConceptMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_lt"))
			it.ConceptLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_lt"))
			it.ConceptMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_lt"))
			it.ConceptMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_gte"))
			it.ConceptGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_gte"))
			it.ConceptMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_gte"))
			it.ConceptMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_lte"))
			it.ConceptLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_lte"))
			it.ConceptMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_lte"))
			it.ConceptMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_in"))
			it.ConceptIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_in"))
			it.ConceptMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_in"))
			it.ConceptMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_not_in"))
			it.ConceptNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_not_in"))
			it.ConceptMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_not_in"))
			it.ConceptMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_like"))
			it.ConceptLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_like"))
			it.ConceptMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_like"))
			it.ConceptMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_prefix"))
			it.ConceptPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_prefix"))
			it.ConceptMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_prefix"))
			it.ConceptMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_suffix"))
			it.ConceptSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin_suffix"))
			it.ConceptMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax_suffix"))
			it.ConceptMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept_null"))
			it.ConceptNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_ne"))
			it.WalletIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_ne"))
			it.WalletIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_ne"))
			it.WalletIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gt"))
			it.WalletIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gt"))
			it.WalletIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gt"))
			it.WalletIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lt"))
			it.WalletIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lt"))
			it.WalletIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lt"))
			it.WalletIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gte"))
			it.WalletIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gte"))
			it.WalletIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gte"))
			it.WalletIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lte"))
			it.WalletIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lte"))
			it.WalletIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lte"))
			it.WalletIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_in"))
			it.WalletIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_in"))
			it.WalletIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_in"))
			it.WalletIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_not_in"))
			it.WalletIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_not_in"))
			it.WalletIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_not_in"))
			it.WalletIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_null"))
			it.WalletIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			it.AccountID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin"))
			it.AccountIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax"))
			it.AccountIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_ne"))
			it.AccountIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_ne"))
			it.AccountIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_ne"))
			it.AccountIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_gt"))
			it.AccountIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_gt"))
			it.AccountIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_gt"))
			it.AccountIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_lt"))
			it.AccountIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_lt"))
			it.AccountIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_lt"))
			it.AccountIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_gte"))
			it.AccountIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_gte"))
			it.AccountIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_gte"))
			it.AccountIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_lte"))
			it.AccountIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_lte"))
			it.AccountIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_lte"))
			it.AccountIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_in"))
			it.AccountIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_in"))
			it.AccountIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_in"))
			it.AccountIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_not_in"))
			it.AccountIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin_not_in"))
			it.AccountIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax_not_in"))
			it.AccountIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId_null"))
			it.AccountIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId"))
			it.PaymentChannelID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin"))
			it.PaymentChannelIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax"))
			it.PaymentChannelIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_ne"))
			it.PaymentChannelIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_ne"))
			it.PaymentChannelIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_ne"))
			it.PaymentChannelIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_gt"))
			it.PaymentChannelIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_gt"))
			it.PaymentChannelIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_gt"))
			it.PaymentChannelIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_lt"))
			it.PaymentChannelIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_lt"))
			it.PaymentChannelIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_lt"))
			it.PaymentChannelIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_gte"))
			it.PaymentChannelIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_gte"))
			it.PaymentChannelIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_gte"))
			it.PaymentChannelIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_lte"))
			it.PaymentChannelIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_lte"))
			it.PaymentChannelIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_lte"))
			it.PaymentChannelIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_in"))
			it.PaymentChannelIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_in"))
			it.PaymentChannelIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_in"))
			it.PaymentChannelIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_not_in"))
			it.PaymentChannelIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin_not_in"))
			it.PaymentChannelIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax_not_in"))
			it.PaymentChannelIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId_null"))
			it.PaymentChannelIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId"))
			it.PaymentTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin"))
			it.PaymentTypeIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax"))
			it.PaymentTypeIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_ne"))
			it.PaymentTypeIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_ne"))
			it.PaymentTypeIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_ne"))
			it.PaymentTypeIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_gt"))
			it.PaymentTypeIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_gt"))
			it.PaymentTypeIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_gt"))
			it.PaymentTypeIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_lt"))
			it.PaymentTypeIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_lt"))
			it.PaymentTypeIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_lt"))
			it.PaymentTypeIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_gte"))
			it.PaymentTypeIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_gte"))
			it.PaymentTypeIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_gte"))
			it.PaymentTypeIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_lte"))
			it.PaymentTypeIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_lte"))
			it.PaymentTypeIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_lte"))
			it.PaymentTypeIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_in"))
			it.PaymentTypeIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_in"))
			it.PaymentTypeIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_in"))
			it.PaymentTypeIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_not_in"))
			it.PaymentTypeIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin_not_in"))
			it.PaymentTypeIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax_not_in"))
			it.PaymentTypeIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId_null"))
			it.PaymentTypeIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "account":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			it.Account, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannel"))
			it.PaymentChannel, err = ec.unmarshalOPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentType"))
			it.PaymentType, err = ec.unmarshalOPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentSortType(ctx context.Context, obj interface{}) (PaymentSortType, error) {
	var it PaymentSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRef":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRef"))
			it.PaymentRef, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMin"))
			it.PaymentRefMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRefMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRefMax"))
			it.PaymentRefMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMin"))
			it.AmountMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountMax"))
			it.AmountMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "amountAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountAvg"))
			it.AmountAvg, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "concept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concept"))
			it.Concept, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMin"))
			it.ConceptMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "conceptMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptMax"))
			it.ConceptMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			it.AccountID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMin"))
			it.AccountIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountIdMax"))
			it.AccountIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelId"))
			it.PaymentChannelID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMin"))
			it.PaymentChannelIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannelIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannelIdMax"))
			it.PaymentChannelIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeId"))
			it.PaymentTypeID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMin"))
			it.PaymentTypeIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentTypeIdMax"))
			it.PaymentTypeIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "account":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("account"))
			it.Account, err = ec.unmarshalOAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentChannel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentChannel"))
			it.PaymentChannel, err = ec.unmarshalOPaymentChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentType"))
			it.PaymentType, err = ec.unmarshalOPaymentTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentTypeFilterType(ctx context.Context, obj interface{}) (PaymentTypeFilterType, error) {
	var it PaymentTypeFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPaymentTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPaymentTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_ne"))
			it.PaymentIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_ne"))
			it.PaymentIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_ne"))
			it.PaymentIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gt"))
			it.PaymentIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gt"))
			it.PaymentIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gt"))
			it.PaymentIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lt"))
			it.PaymentIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lt"))
			it.PaymentIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lt"))
			it.PaymentIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_gte"))
			it.PaymentIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_gte"))
			it.PaymentIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_gte"))
			it.PaymentIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_lte"))
			it.PaymentIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_lte"))
			it.PaymentIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_lte"))
			it.PaymentIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_in"))
			it.PaymentIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_in"))
			it.PaymentIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_in"))
			it.PaymentIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_not_in"))
			it.PaymentIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin_not_in"))
			it.PaymentIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax_not_in"))
			it.PaymentIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId_null"))
			it.PaymentIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
			it.Payment, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentTypeSortType(ctx context.Context, obj interface{}) (PaymentTypeSortType, error) {
	var it PaymentTypeSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentId"))
			it.PaymentID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMin"))
			it.PaymentIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentIdMax"))
			it.PaymentIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment"))
			it.Payment, err = ec.unmarshalOPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWalletFilterType(ctx context.Context, obj interface{}) (WalletFilterType, error) {
	var it WalletFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOWalletFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOWalletFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_ne"))
			it.UserIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_ne"))
			it.UserIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_ne"))
			it.UserIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gt"))
			it.UserIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gt"))
			it.UserIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gt"))
			it.UserIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lt"))
			it.UserIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lt"))
			it.UserIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lt"))
			it.UserIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gte"))
			it.UserIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gte"))
			it.UserIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gte"))
			it.UserIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lte"))
			it.UserIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lte"))
			it.UserIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lte"))
			it.UserIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_in"))
			it.UserIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_in"))
			it.UserIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_in"))
			it.UserIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_not_in"))
			it.UserIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_not_in"))
			it.UserIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_not_in"))
			it.UserIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_null"))
			it.UserIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			it.Balance, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin"))
			it.BalanceMin, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax"))
			it.BalanceMax, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg"))
			it.BalanceAvg, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_ne"))
			it.BalanceNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_ne"))
			it.BalanceMinNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_ne"))
			it.BalanceMaxNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_ne"))
			it.BalanceAvgNe, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_gt"))
			it.BalanceGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_gt"))
			it.BalanceMinGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_gt"))
			it.BalanceMaxGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_gt"))
			it.BalanceAvgGt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_lt"))
			it.BalanceLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_lt"))
			it.BalanceMinLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_lt"))
			it.BalanceMaxLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_lt"))
			it.BalanceAvgLt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_gte"))
			it.BalanceGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_gte"))
			it.BalanceMinGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_gte"))
			it.BalanceMaxGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_gte"))
			it.BalanceAvgGte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_lte"))
			it.BalanceLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_lte"))
			it.BalanceMinLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_lte"))
			it.BalanceMaxLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_lte"))
			it.BalanceAvgLte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_in"))
			it.BalanceIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_in"))
			it.BalanceMinIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_in"))
			it.BalanceMaxIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_in"))
			it.BalanceAvgIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_not_in"))
			it.BalanceNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin_not_in"))
			it.BalanceMinNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax_not_in"))
			it.BalanceMaxNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg_not_in"))
			it.BalanceAvgNotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance_null"))
			it.BalanceNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId"))
			it.WalletTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin"))
			it.WalletTypeIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax"))
			it.WalletTypeIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_ne"))
			it.WalletTypeIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_ne"))
			it.WalletTypeIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_ne"))
			it.WalletTypeIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_gt"))
			it.WalletTypeIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_gt"))
			it.WalletTypeIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_gt"))
			it.WalletTypeIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_lt"))
			it.WalletTypeIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_lt"))
			it.WalletTypeIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_lt"))
			it.WalletTypeIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_gte"))
			it.WalletTypeIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_gte"))
			it.WalletTypeIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_gte"))
			it.WalletTypeIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_lte"))
			it.WalletTypeIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_lte"))
			it.WalletTypeIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_lte"))
			it.WalletTypeIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_in"))
			it.WalletTypeIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_in"))
			it.WalletTypeIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_in"))
			it.WalletTypeIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_not_in"))
			it.WalletTypeIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin_not_in"))
			it.WalletTypeIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax_not_in"))
			it.WalletTypeIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId_null"))
			it.WalletTypeIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletType"))
			it.WalletType, err = ec.unmarshalOWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounts"))
			it.Accounts, err = ec.unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payments"))
			it.Payments, err = ec.unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWalletSortType(ctx context.Context, obj interface{}) (WalletSortType, error) {
	var it WalletSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			it.Balance, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMin"))
			it.BalanceMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceMax"))
			it.BalanceMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "balanceAvg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balanceAvg"))
			it.BalanceAvg, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeId"))
			it.WalletTypeID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMin"))
			it.WalletTypeIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletTypeIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletTypeIdMax"))
			it.WalletTypeIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIds"))
			it.AccountsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIdsMin"))
			it.AccountsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accountsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountsIdsMax"))
			it.AccountsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIds"))
			it.PaymentsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIdsMin"))
			it.PaymentsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentsIdsMax"))
			it.PaymentsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletType"))
			it.WalletType, err = ec.unmarshalOWalletTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "accounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accounts"))
			it.Accounts, err = ec.unmarshalOAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "payments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payments"))
			it.Payments, err = ec.unmarshalOPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWalletTypeFilterType(ctx context.Context, obj interface{}) (WalletTypeFilterType, error) {
	var it WalletTypeFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOWalletTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOWalletTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_ne"))
			it.WalletIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_ne"))
			it.WalletIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_ne"))
			it.WalletIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gt"))
			it.WalletIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gt"))
			it.WalletIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gt"))
			it.WalletIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lt"))
			it.WalletIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lt"))
			it.WalletIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lt"))
			it.WalletIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_gte"))
			it.WalletIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_gte"))
			it.WalletIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_gte"))
			it.WalletIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_lte"))
			it.WalletIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_lte"))
			it.WalletIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_lte"))
			it.WalletIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_in"))
			it.WalletIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_in"))
			it.WalletIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_in"))
			it.WalletIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_not_in"))
			it.WalletIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin_not_in"))
			it.WalletIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax_not_in"))
			it.WalletIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId_null"))
			it.WalletIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWalletTypeSortType(ctx context.Context, obj interface{}) (WalletTypeSortType, error) {
	var it WalletTypeSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletId"))
			it.WalletID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMin"))
			it.WalletIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletIdMax"))
			it.WalletIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalOWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "accountProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_accountProvider(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "wallet":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_wallet(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_payments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountNumber":
			out.Values[i] = ec._Account_accountNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "balance":
			out.Values[i] = ec._Account_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "accountProviderId":
			out.Values[i] = ec._Account_accountProviderId(ctx, field, obj)
		case "walletId":
			out.Values[i] = ec._Account_walletId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Account_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Account_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Account_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Account_createdBy(ctx, field, obj)
		case "paymentsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_paymentsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_paymentsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountProviderImplementors = []string{"AccountProvider"}

func (ec *executionContext) _AccountProvider(ctx context.Context, sel ast.SelectionSet, obj *AccountProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountProvider")
		case "id":
			out.Values[i] = ec._AccountProvider_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "accounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProvider_accounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountProviderType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProvider_accountProviderType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			out.Values[i] = ec._AccountProvider_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._AccountProvider_description(ctx, field, obj)
		case "address":
			out.Values[i] = ec._AccountProvider_address(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._AccountProvider_phone(ctx, field, obj)
		case "accountProviderTypeId":
			out.Values[i] = ec._AccountProvider_accountProviderTypeId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AccountProvider_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AccountProvider_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._AccountProvider_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._AccountProvider_createdBy(ctx, field, obj)
		case "accountsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProvider_accountsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProvider_accountsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountProviderResultTypeImplementors = []string{"AccountProviderResultType"}

func (ec *executionContext) _AccountProviderResultType(ctx context.Context, sel ast.SelectionSet, obj *AccountProviderResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountProviderResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountProviderResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProviderResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProviderResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountProviderTypeImplementors = []string{"AccountProviderType"}

func (ec *executionContext) _AccountProviderType(ctx context.Context, sel ast.SelectionSet, obj *AccountProviderType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountProviderTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountProviderType")
		case "id":
			out.Values[i] = ec._AccountProviderType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._AccountProviderType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._AccountProviderType_description(ctx, field, obj)
		case "accountProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProviderType_accountProvider(ctx, field, obj)
				return res
			})
		case "accountProviderId":
			out.Values[i] = ec._AccountProviderType_accountProviderId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AccountProviderType_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AccountProviderType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._AccountProviderType_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._AccountProviderType_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountProviderTypeResultTypeImplementors = []string{"AccountProviderTypeResultType"}

func (ec *executionContext) _AccountProviderTypeResultType(ctx context.Context, sel ast.SelectionSet, obj *AccountProviderTypeResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountProviderTypeResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountProviderTypeResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProviderTypeResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountProviderTypeResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountResultTypeImplementors = []string{"AccountResultType"}

func (ec *executionContext) _AccountResultType(ctx context.Context, sel ast.SelectionSet, obj *AccountResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccountResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createWallet":
			out.Values[i] = ec._Mutation_createWallet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateWallet":
			out.Values[i] = ec._Mutation_updateWallet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteWallet":
			out.Values[i] = ec._Mutation_deleteWallet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllWallets":
			out.Values[i] = ec._Mutation_deleteAllWallets(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createWalletType":
			out.Values[i] = ec._Mutation_createWalletType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateWalletType":
			out.Values[i] = ec._Mutation_updateWalletType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteWalletType":
			out.Values[i] = ec._Mutation_deleteWalletType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllWalletTypes":
			out.Values[i] = ec._Mutation_deleteAllWalletTypes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAccountProviderType":
			out.Values[i] = ec._Mutation_createAccountProviderType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAccountProviderType":
			out.Values[i] = ec._Mutation_updateAccountProviderType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccountProviderType":
			out.Values[i] = ec._Mutation_deleteAccountProviderType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllAccountProviderTypes":
			out.Values[i] = ec._Mutation_deleteAllAccountProviderTypes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAccountProvider":
			out.Values[i] = ec._Mutation_createAccountProvider(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAccountProvider":
			out.Values[i] = ec._Mutation_updateAccountProvider(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccountProvider":
			out.Values[i] = ec._Mutation_deleteAccountProvider(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllAccountProviders":
			out.Values[i] = ec._Mutation_deleteAllAccountProviders(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAccount":
			out.Values[i] = ec._Mutation_createAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAccount":
			out.Values[i] = ec._Mutation_updateAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccount":
			out.Values[i] = ec._Mutation_deleteAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllAccounts":
			out.Values[i] = ec._Mutation_deleteAllAccounts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPaymentChannel":
			out.Values[i] = ec._Mutation_createPaymentChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePaymentChannel":
			out.Values[i] = ec._Mutation_updatePaymentChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePaymentChannel":
			out.Values[i] = ec._Mutation_deletePaymentChannel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPaymentChannels":
			out.Values[i] = ec._Mutation_deleteAllPaymentChannels(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPaymentType":
			out.Values[i] = ec._Mutation_createPaymentType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePaymentType":
			out.Values[i] = ec._Mutation_updatePaymentType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePaymentType":
			out.Values[i] = ec._Mutation_deletePaymentType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPaymentTypes":
			out.Values[i] = ec._Mutation_deleteAllPaymentTypes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPayment":
			out.Values[i] = ec._Mutation_createPayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePayment":
			out.Values[i] = ec._Mutation_updatePayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePayment":
			out.Values[i] = ec._Mutation_deletePayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPayments":
			out.Values[i] = ec._Mutation_deleteAllPayments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentImplementors = []string{"Payment"}

func (ec *executionContext) _Payment(ctx context.Context, sel ast.SelectionSet, obj *Payment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payment")
		case "id":
			out.Values[i] = ec._Payment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "wallet":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payment_wallet(ctx, field, obj)
				return res
			})
		case "account":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payment_account(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentChannel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payment_paymentChannel(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Payment_paymentType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentRef":
			out.Values[i] = ec._Payment_paymentRef(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Payment_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "concept":
			out.Values[i] = ec._Payment_concept(ctx, field, obj)
		case "walletId":
			out.Values[i] = ec._Payment_walletId(ctx, field, obj)
		case "accountId":
			out.Values[i] = ec._Payment_accountId(ctx, field, obj)
		case "paymentChannelId":
			out.Values[i] = ec._Payment_paymentChannelId(ctx, field, obj)
		case "paymentTypeId":
			out.Values[i] = ec._Payment_paymentTypeId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Payment_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Payment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Payment_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Payment_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentChannelImplementors = []string{"PaymentChannel"}

func (ec *executionContext) _PaymentChannel(ctx context.Context, sel ast.SelectionSet, obj *PaymentChannel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentChannelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentChannel")
		case "id":
			out.Values[i] = ec._PaymentChannel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._PaymentChannel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._PaymentChannel_description(ctx, field, obj)
		case "payment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentChannel_payment(ctx, field, obj)
				return res
			})
		case "paymentId":
			out.Values[i] = ec._PaymentChannel_paymentId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PaymentChannel_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PaymentChannel_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._PaymentChannel_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PaymentChannel_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentChannelResultTypeImplementors = []string{"PaymentChannelResultType"}

func (ec *executionContext) _PaymentChannelResultType(ctx context.Context, sel ast.SelectionSet, obj *PaymentChannelResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentChannelResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentChannelResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentChannelResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentChannelResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentResultTypeImplementors = []string{"PaymentResultType"}

func (ec *executionContext) _PaymentResultType(ctx context.Context, sel ast.SelectionSet, obj *PaymentResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentTypeImplementors = []string{"PaymentType"}

func (ec *executionContext) _PaymentType(ctx context.Context, sel ast.SelectionSet, obj *PaymentType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentType")
		case "id":
			out.Values[i] = ec._PaymentType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._PaymentType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._PaymentType_description(ctx, field, obj)
		case "payment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentType_payment(ctx, field, obj)
				return res
			})
		case "paymentId":
			out.Values[i] = ec._PaymentType_paymentId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PaymentType_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PaymentType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._PaymentType_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PaymentType_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentTypeResultTypeImplementors = []string{"PaymentTypeResultType"}

func (ec *executionContext) _PaymentTypeResultType(ctx context.Context, sel ast.SelectionSet, obj *PaymentTypeResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentTypeResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentTypeResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentTypeResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentTypeResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "wallet":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_wallet(ctx, field)
				return res
			})
		case "wallets":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_wallets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "walletType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_walletType(ctx, field)
				return res
			})
		case "walletTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_walletTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountProviderType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountProviderType(ctx, field)
				return res
			})
		case "accountProviderTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountProviderTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountProvider(ctx, field)
				return res
			})
		case "accountProviders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountProviders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "account":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				return res
			})
		case "accounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentChannel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paymentChannel(ctx, field)
				return res
			})
		case "paymentChannels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paymentChannels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paymentType(ctx, field)
				return res
			})
		case "paymentTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paymentTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payment(ctx, field)
				return res
			})
		case "payments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletImplementors = []string{"Wallet"}

func (ec *executionContext) _Wallet(ctx context.Context, sel ast.SelectionSet, obj *Wallet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Wallet")
		case "id":
			out.Values[i] = ec._Wallet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userId":
			out.Values[i] = ec._Wallet_userId(ctx, field, obj)
		case "walletType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_walletType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_accounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_payments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "balance":
			out.Values[i] = ec._Wallet_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "walletTypeId":
			out.Values[i] = ec._Wallet_walletTypeId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Wallet_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Wallet_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Wallet_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Wallet_createdBy(ctx, field, obj)
		case "accountsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_accountsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accountsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_accountsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_paymentsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "paymentsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Wallet_paymentsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletResultTypeImplementors = []string{"WalletResultType"}

func (ec *executionContext) _WalletResultType(ctx context.Context, sel ast.SelectionSet, obj *WalletResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WalletResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WalletResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WalletResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletTypeImplementors = []string{"WalletType"}

func (ec *executionContext) _WalletType(ctx context.Context, sel ast.SelectionSet, obj *WalletType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WalletType")
		case "id":
			out.Values[i] = ec._WalletType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._WalletType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._WalletType_description(ctx, field, obj)
		case "wallet":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WalletType_wallet(ctx, field, obj)
				return res
			})
		case "walletId":
			out.Values[i] = ec._WalletType_walletId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._WalletType_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._WalletType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._WalletType_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._WalletType_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletTypeResultTypeImplementors = []string{"WalletTypeResultType"}

func (ec *executionContext) _WalletTypeResultType(ctx context.Context, sel ast.SelectionSet, obj *WalletTypeResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletTypeResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WalletTypeResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WalletTypeResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WalletTypeResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx context.Context, sel ast.SelectionSet, v Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*Account) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx context.Context, sel ast.SelectionSet, v *Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx context.Context, v interface{}) (*AccountFilterType, error) {
	res, err := ec.unmarshalInputAccountFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountProvider2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx context.Context, sel ast.SelectionSet, v AccountProvider) graphql.Marshaler {
	return ec._AccountProvider(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountProvider2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderᚄ(ctx context.Context, sel ast.SelectionSet, v []*AccountProvider) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx context.Context, sel ast.SelectionSet, v *AccountProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountProviderCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx context.Context, v interface{}) (*AccountProviderFilterType, error) {
	res, err := ec.unmarshalInputAccountProviderFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountProviderResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderResultType(ctx context.Context, sel ast.SelectionSet, v AccountProviderResultType) graphql.Marshaler {
	return ec._AccountProviderResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountProviderResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderResultType(ctx context.Context, sel ast.SelectionSet, v *AccountProviderResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountProviderResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountProviderSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortType(ctx context.Context, v interface{}) (*AccountProviderSortType, error) {
	res, err := ec.unmarshalInputAccountProviderSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountProviderType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx context.Context, sel ast.SelectionSet, v AccountProviderType) graphql.Marshaler {
	return ec._AccountProviderType(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountProviderType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*AccountProviderType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx context.Context, sel ast.SelectionSet, v *AccountProviderType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountProviderType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountProviderTypeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx context.Context, v interface{}) (*AccountProviderTypeFilterType, error) {
	res, err := ec.unmarshalInputAccountProviderTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountProviderTypeResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeResultType(ctx context.Context, sel ast.SelectionSet, v AccountProviderTypeResultType) graphql.Marshaler {
	return ec._AccountProviderTypeResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountProviderTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeResultType(ctx context.Context, sel ast.SelectionSet, v *AccountProviderTypeResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountProviderTypeResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountProviderTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortType(ctx context.Context, v interface{}) (*AccountProviderTypeSortType, error) {
	res, err := ec.unmarshalInputAccountProviderTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAccountProviderTypeUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNAccountProviderUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNAccountResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountResultType(ctx context.Context, sel ast.SelectionSet, v AccountResultType) graphql.Marshaler {
	return ec._AccountResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountResultType(ctx context.Context, sel ast.SelectionSet, v *AccountResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx context.Context, v interface{}) (*AccountSortType, error) {
	res, err := ec.unmarshalInputAccountSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAccountUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNPayment2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx context.Context, sel ast.SelectionSet, v Payment) graphql.Marshaler {
	return ec._Payment(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayment2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*Payment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx context.Context, sel ast.SelectionSet, v *Payment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentChannel2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx context.Context, sel ast.SelectionSet, v PaymentChannel) graphql.Marshaler {
	return ec._PaymentChannel(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentChannel2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelᚄ(ctx context.Context, sel ast.SelectionSet, v []*PaymentChannel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx context.Context, sel ast.SelectionSet, v *PaymentChannel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentChannel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentChannelCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx context.Context, v interface{}) (*PaymentChannelFilterType, error) {
	res, err := ec.unmarshalInputPaymentChannelFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentChannelResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelResultType(ctx context.Context, sel ast.SelectionSet, v PaymentChannelResultType) graphql.Marshaler {
	return ec._PaymentChannelResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentChannelResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelResultType(ctx context.Context, sel ast.SelectionSet, v *PaymentChannelResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentChannelResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortType(ctx context.Context, v interface{}) (*PaymentChannelSortType, error) {
	res, err := ec.unmarshalInputPaymentChannelSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPaymentChannelUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPaymentCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx context.Context, v interface{}) (*PaymentFilterType, error) {
	res, err := ec.unmarshalInputPaymentFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentResultType(ctx context.Context, sel ast.SelectionSet, v PaymentResultType) graphql.Marshaler {
	return ec._PaymentResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentResultType(ctx context.Context, sel ast.SelectionSet, v *PaymentResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx context.Context, v interface{}) (*PaymentSortType, error) {
	res, err := ec.unmarshalInputPaymentSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx context.Context, sel ast.SelectionSet, v PaymentType) graphql.Marshaler {
	return ec._PaymentType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*PaymentType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx context.Context, sel ast.SelectionSet, v *PaymentType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentTypeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx context.Context, v interface{}) (*PaymentTypeFilterType, error) {
	res, err := ec.unmarshalInputPaymentTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentTypeResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeResultType(ctx context.Context, sel ast.SelectionSet, v PaymentTypeResultType) graphql.Marshaler {
	return ec._PaymentTypeResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeResultType(ctx context.Context, sel ast.SelectionSet, v *PaymentTypeResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentTypeResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortType(ctx context.Context, v interface{}) (*PaymentTypeSortType, error) {
	res, err := ec.unmarshalInputPaymentTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPaymentTypeUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPaymentUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNWallet2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx context.Context, sel ast.SelectionSet, v Wallet) graphql.Marshaler {
	return ec._Wallet(ctx, sel, &v)
}

func (ec *executionContext) marshalNWallet2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletᚄ(ctx context.Context, sel ast.SelectionSet, v []*Wallet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx context.Context, sel ast.SelectionSet, v *Wallet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Wallet(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWalletCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx context.Context, v interface{}) (*WalletFilterType, error) {
	res, err := ec.unmarshalInputWalletFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWalletResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletResultType(ctx context.Context, sel ast.SelectionSet, v WalletResultType) graphql.Marshaler {
	return ec._WalletResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNWalletResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletResultType(ctx context.Context, sel ast.SelectionSet, v *WalletResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WalletResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx context.Context, v interface{}) (*WalletSortType, error) {
	res, err := ec.unmarshalInputWalletSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWalletType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx context.Context, sel ast.SelectionSet, v WalletType) graphql.Marshaler {
	return ec._WalletType(ctx, sel, &v)
}

func (ec *executionContext) marshalNWalletType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*WalletType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx context.Context, sel ast.SelectionSet, v *WalletType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WalletType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWalletTypeCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx context.Context, v interface{}) (*WalletTypeFilterType, error) {
	res, err := ec.unmarshalInputWalletTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWalletTypeResultType2githubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeResultType(ctx context.Context, sel ast.SelectionSet, v WalletTypeResultType) graphql.Marshaler {
	return ec._WalletTypeResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNWalletTypeResultType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeResultType(ctx context.Context, sel ast.SelectionSet, v *WalletTypeResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WalletTypeResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWalletTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortType(ctx context.Context, v interface{}) (*WalletTypeSortType, error) {
	res, err := ec.unmarshalInputWalletTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWalletTypeUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNWalletUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccount2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccount(ctx context.Context, sel ast.SelectionSet, v *Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterTypeᚄ(ctx context.Context, v interface{}) ([]*AccountFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountFilterType(ctx context.Context, v interface{}) (*AccountFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountProvider2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProvider(ctx context.Context, sel ast.SelectionSet, v *AccountProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountProviderFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterTypeᚄ(ctx context.Context, v interface{}) ([]*AccountProviderFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountProviderFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountProviderFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderFilterType(ctx context.Context, v interface{}) (*AccountProviderFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountProviderFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountProviderSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortTypeᚄ(ctx context.Context, v interface{}) ([]*AccountProviderSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountProviderSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountProviderSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountProviderSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderSortType(ctx context.Context, v interface{}) (*AccountProviderSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountProviderSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountProviderType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderType(ctx context.Context, sel ast.SelectionSet, v *AccountProviderType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccountProviderType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountProviderTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterTypeᚄ(ctx context.Context, v interface{}) ([]*AccountProviderTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountProviderTypeFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountProviderTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeFilterType(ctx context.Context, v interface{}) (*AccountProviderTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountProviderTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountProviderTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortTypeᚄ(ctx context.Context, v interface{}) ([]*AccountProviderTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountProviderTypeSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountProviderTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountProviderTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountProviderTypeSortType(ctx context.Context, v interface{}) (*AccountProviderTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountProviderTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortTypeᚄ(ctx context.Context, v interface{}) ([]*AccountSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AccountSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAccountSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐAccountSortType(ctx context.Context, v interface{}) (*AccountSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAccountSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, v interface{}) (*ObjectSortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ObjectSortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, sel ast.SelectionSet, v *ObjectSortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPayment2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPayment(ctx context.Context, sel ast.SelectionSet, v *Payment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymentChannel2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannel(ctx context.Context, sel ast.SelectionSet, v *PaymentChannel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentChannel(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentChannelFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentChannelFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentChannelFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentChannelFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelFilterType(ctx context.Context, v interface{}) (*PaymentChannelFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentChannelFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentChannelSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentChannelSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentChannelSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentChannelSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentChannelSortType(ctx context.Context, v interface{}) (*PaymentChannelSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentChannelSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentFilterType(ctx context.Context, v interface{}) (*PaymentFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentSortType(ctx context.Context, v interface{}) (*PaymentSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentType(ctx context.Context, sel ast.SelectionSet, v *PaymentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentTypeFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeFilterType(ctx context.Context, v interface{}) (*PaymentTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPaymentTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortTypeᚄ(ctx context.Context, v interface{}) ([]*PaymentTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PaymentTypeSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPaymentTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐPaymentTypeSortType(ctx context.Context, v interface{}) (*PaymentTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOWallet2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWallet(ctx context.Context, sel ast.SelectionSet, v *Wallet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Wallet(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWalletFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterTypeᚄ(ctx context.Context, v interface{}) ([]*WalletFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*WalletFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWalletFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletFilterType(ctx context.Context, v interface{}) (*WalletFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWalletFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOWalletSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortTypeᚄ(ctx context.Context, v interface{}) ([]*WalletSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*WalletSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWalletSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletSortType(ctx context.Context, v interface{}) (*WalletSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWalletSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWalletType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletType(ctx context.Context, sel ast.SelectionSet, v *WalletType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WalletType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWalletTypeFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterTypeᚄ(ctx context.Context, v interface{}) ([]*WalletTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*WalletTypeFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWalletTypeFilterType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeFilterType(ctx context.Context, v interface{}) (*WalletTypeFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWalletTypeFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOWalletTypeSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortTypeᚄ(ctx context.Context, v interface{}) ([]*WalletTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*WalletTypeSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWalletTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWalletTypeSortType2ᚖgithubᚗcomᚋloopcontextᚋpaymentᚑapiᚑgoᚋgenᚐWalletTypeSortType(ctx context.Context, v interface{}) (*WalletTypeSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWalletTypeSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
